{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"},"colab":{"name":"0118._neural_nets_with_keras.ipynb의 사본","provenance":[{"file_id":"https://github.com/ageron/tf2_course/blob/master/01_neural_nets_with_keras.ipynb","timestamp":1579320493987}],"collapsed_sections":["T9lhMUM-gy9T","JEyusGwugy9W","CqADaP_Jgy9q","m4axw0O7gy93","SDdn68CRgy-F","AwmY3dZ9gy-Y","nB6L28rQgy-i","NE4DNJKngy-z","S1hqID7Ugy-_","MIZ3Lsbtgy_U","WdWO0ashgy_k","QFgBd20Ngy_z","bOK9ZmTvgy_-","vrbSAGc1gzAI","XT1D7TvQgzAP","tFQTvG2MgzAT","322XyVTJgzAX","rzNW20EFgzAh","Hwx_skBLgzAy","D3Hm7uL4gzA2","NqUz-wxNgzA5","oVhy1mmtgzA_","cj81X94PgzBB","woyLR9hsgzBE","2UnEPOyogzBH","vW3ucfVAgzBJ","4XVyNyOCgzBM","GIxKKaPIgzBO","SkjBZKrOgzBW","ISxV9JYigzBX","wNpkiAgQgzBd","XJde-FlCgzBo","8uwdDJ2SgzBp","UtQvmyKlgzB1","MFL2woiegzB5","UgWKhFaMgzB5","1ifIgjGdgzCB","4O_Sq36IgzCD","ITeFoijxgzCK","PsK0H2MRgzCR","sgt3MskYgzCS","m7r0pAifgzCZ","eX_73u0pgzCa","vR14xotLgzCg","4AhPMs_AgzCi","rNLYhpUcgzCi","F9BNDXe7gzCp","t_AhW2kAgzCw","ZNk3xOqlgzC5","uUOTnEykgzDH","PcrviIYdgzDH","3TRr5r10gzDQ","jbmqLks9gzDU","_B30EIWwgzDX","7Fj0iqPCgzDh","3CQBwm7agzDh","wQ0GLkfPgzDm","0cnaCN1-gzDt","1gXX7fBugzDz","y-WPxfA8gzD-","KD3_BvJggzEC","bBHOjmr7gzEG","PwcHCVNKgzEI","oP9wHREZgzEL","zt1VkvxzgzEO","j4UOH22_gzES","tQN6LdENgzEY","B7Yw9YPIgzEZ","lYDms7_BgzEc","8bScqs-ogzEd","1pvCiXkKgzEg","prvVDhyzgzEk","jIJP0iAlgzEp","_RU7c0KKgzEr","9sACe9zygzEr","7CBCG-WogzE4","5rgs3iHEgzE-","oFD14j15gzFG","e6P_hoyRgzFO","_Og8qm6pgzFQ","z83F3VG3gzFT","kifbLLvrgzFV","XABJPdcIgzFZ","nwypF4rQgzFb","nIyYC0MLgzFf","muC82wN_gzFf","vNgA8ODagzFg","-PRF7MSkgzFi","kBfb9DwlgzFk","Lw4-FS1igzFl"]}},"cells":[{"cell_type":"markdown","metadata":{"collapsed":true,"id":"lCNG75mygy6g","colab_type":"text"},"source":["# Neural Nets with Keras"]},{"cell_type":"markdown","metadata":{"id":"PHmyn4VQgy6n","colab_type":"text"},"source":["In this notebook you will learn how to implement neural networks using the Keras API. We will use TensorFlow's own implementation, *tf.keras*, which comes bundled with TensorFlow."]},{"cell_type":"markdown","metadata":{"id":"6nS4RvNZgy6s","colab_type":"text"},"source":["Don't hesitate to look at the documentation at [keras.io](https://keras.io/). All the code examples should work fine with tf.keras, the only difference is how to import Keras:\n","\n","```python\n","# keras.io code:\n","from keras.layers import Dense\n","output_layer = Dense(10)\n","\n","# corresponding tf.keras code:\n","from tensorflow.keras.layers import Dense\n","output_layer = Dense(10)\n","\n","# or:\n","from tensorflow import keras\n","output_layer = keras.layers.Dense(10)\n","```\n","\n","In this notebook, we will not use any TensorFlow-specific code, so everything you see would run just the same way on [keras-team](https://github.com/keras-team/keras) or any other Python implementation of the Keras API (except for the imports)."]},{"cell_type":"markdown","metadata":{"id":"lqKeGaxEgy6z","colab_type":"text"},"source":["## Imports"]},{"cell_type":"code","metadata":{"id":"qfs9Oc2-gy65","colab_type":"code","colab":{}},"source":["%matplotlib inline\n","%load_ext tensorboard"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iWg9njzhppxz","colab_type":"code","outputId":"389d44b6-dab2-4567-eedc-4b39034092d6","executionInfo":{"status":"ok","timestamp":1579317478853,"user_tz":-540,"elapsed":841,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%tensorflow_version 2.x"],"execution_count":0,"outputs":[{"output_type":"stream","text":["TensorFlow 2.x selected.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WZVrtpZygy7P","colab_type":"code","colab":{}},"source":["import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import pandas as pd\n","import sklearn\n","import sys\n","import tensorflow as tf\n","from tensorflow import keras  # tf.keras\n","import time"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RVwR24HCgy7f","colab_type":"code","outputId":"e81f7875-b621-41d7-ee79-caf7af0bd755","executionInfo":{"status":"ok","timestamp":1579317488082,"user_tz":-540,"elapsed":4717,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["print(\"python\", sys.version)\n","for module in mpl, np, pd, sklearn, tf, keras:\n","    print(module.__name__, module.__version__)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["python 3.6.9 (default, Nov  7 2019, 10:44:02) \n","[GCC 8.3.0]\n","matplotlib 3.1.2\n","numpy 1.17.5\n","pandas 0.25.3\n","sklearn 0.22.1\n","tensorflow 2.1.0-rc1\n","tensorflow_core.python.keras.api._v2.keras 2.2.4-tf\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C-uBxNcRgy7u","colab_type":"code","colab":{}},"source":["assert sys.version_info >= (3, 5) # Python ≥3.5 required\n","assert tf.__version__ >= \"2.0\"    # TensorFlow ≥2.0 required"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PeurS-tlgy77","colab_type":"text"},"source":["![Exercise](https://c1.staticflickr.com/9/8101/8553474140_c50cf08708_b.jpg)"]},{"cell_type":"markdown","metadata":{"id":"Gb-AfrrPgy7-","colab_type":"text"},"source":["## Exercise 1 – TensorFlow Playground"]},{"cell_type":"markdown","metadata":{"id":"8gXgKxGvgy8A","colab_type":"text"},"source":["Visit the [TensorFlow Playground](http://playground.tensorflow.org).\n","* **Layers and patterns**: try training the default neural network by clicking the \"Run\" button (top left). Notice how it quickly finds a good solution for the classification task. Notice that the neurons in the first hidden layer have learned simple patterns, while the neurons in the second hidden layer have learned to combine the simple patterns of the first hidden layer into more complex patterns). In general, the more layers, the more complex the patterns can be.\n","* **Activation function**: try replacing the Tanh activation function with the ReLU activation function, and train the network again. Notice that it finds a solution even faster, but this time the boundaries are linear. This is due to the shape of the ReLU function.\n","* **Local minima**: modify the network architecture to have just one hidden layer with three neurons. Train it multiple times (to reset the network weights, just add and remove a neuron). Notice that the training time varies a lot, and sometimes it even gets stuck in a local minimum.\n","* **Too small**: now remove one neuron to keep just 2. Notice that the neural network is now incapable of finding a good solution, even if you try multiple times. The model has too few parameters and it systematically underfits the training set.\n","* **Large enough**: next, set the number of neurons to 8 and train the network several times. Notice that it is now consistently fast and never gets stuck. This highlights an important finding in neural network theory: large neural networks almost never get stuck in local minima, and even when they do these local optima are almost as good as the global optimum. However, they can still get stuck on long plateaus for a long time.\n","* **Deep net and vanishing gradients**: now change the dataset to be the spiral (bottom right dataset under \"DATA\"). Change the network architecture to have 4 hidden layers with 8 neurons each. Notice that training takes much longer, and often gets stuck on plateaus for long periods of time. Also notice that the neurons in the highest layers (i.e. on the right) tend to evolve faster than the neurons in the lowest layers (i.e. on the left). This problem, called the \"vanishing gradients\" problem, can be alleviated using better weight initialization and other techniques, better optimizers (such as AdaGrad or Adam), or using Batch Normalization.\n","* **More**: go ahead and play with the other parameters to get a feel of what they do. In fact, after this course you should definitely play with this UI for at least one hour, it will grow your intuitions about neural networks significantly."]},{"cell_type":"markdown","metadata":{"id":"PvCxEIujgy8C","colab_type":"text"},"source":["![Exercise](https://c1.staticflickr.com/9/8101/8553474140_c50cf08708_b.jpg)"]},{"cell_type":"markdown","metadata":{"id":"Pt5ygp9cgy8E","colab_type":"text"},"source":["## Exercise 2 – Image classification with tf.keras"]},{"cell_type":"markdown","metadata":{"id":"QLIrK9iXgy8G","colab_type":"text"},"source":["### Load the Fashion MNIST dataset"]},{"cell_type":"markdown","metadata":{"id":"7rsY4ANRgy8J","colab_type":"text"},"source":["Let's start by loading the fashion MNIST dataset. Keras has a number of functions to load popular datasets in `keras.datasets`. The dataset is already split for you between a training set and a test set, but it can be useful to split the training set further to have a validation set:"]},{"cell_type":"code","metadata":{"id":"ChiiBUl9gy8L","colab_type":"code","colab":{}},"source":["fashion_mnist = keras.datasets.fashion_mnist\n","(X_train_full, y_train_full), (X_test, y_test) = (\n","    fashion_mnist.load_data())\n","X_valid, X_train = X_train_full[:5000], X_train_full[5000:]\n","y_valid, y_train = y_train_full[:5000], y_train_full[5000:]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"B3Z_w5lZgy8T","colab_type":"text"},"source":["The training set contains 55,000 grayscale images, each 28x28 pixels:"]},{"cell_type":"code","metadata":{"id":"NO2Max2ogy8V","colab_type":"code","outputId":"25bc49ce-2808-40eb-8e05-1eb661cd0dbf","executionInfo":{"status":"ok","timestamp":1579317495453,"user_tz":-540,"elapsed":545,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X_train.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(55000, 28, 28)"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"uU2Z-ogvgy8a","colab_type":"text"},"source":["Each pixel intensity is represented by a uint8 (byte) from 0 to 255:"]},{"cell_type":"code","metadata":{"id":"-GIIuarAgy8b","colab_type":"code","outputId":"6b4b35d2-95e8-4ede-aa13-77c2a0dded56","executionInfo":{"status":"ok","timestamp":1579317497540,"user_tz":-540,"elapsed":1078,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["X_train[0]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","          0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  44, 127,\n","        182, 185, 161, 120,  55,   0,   0,   0,   0,   0,   0,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  42, 198, 251, 255,\n","        251, 249, 247, 255, 252, 214, 100,   0,   0,   0,   0,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0,   0,   2,   0,   0, 233, 252, 237, 239,\n","        234, 237, 235, 237, 237, 254, 227,   0,   0,   0,   0,   1,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0,   2,   0,   0,  16, 210, 225, 215, 175,\n","        217, 216, 193, 196, 226, 221, 209,  50,   0,   0,   2,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   2,   0,   0, 199, 229, 232, 230, 245, 204,\n","        219, 253, 245, 207, 194, 223, 231, 236, 235,   0,   0,   3,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   1,   0, 137, 235, 204, 209, 201, 209, 234,\n","        190, 234, 218, 215, 238, 239, 204, 189, 224, 154,   0,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0,   0, 194, 201, 200, 209, 202, 193, 205,\n","        194, 183, 218, 231, 197, 172, 181, 193, 205, 199,   0,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0,   3, 212, 203, 188, 189, 196, 198, 198,\n","        201, 196, 217, 179, 167, 183, 217, 197, 202, 219,  30,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0,  34, 225, 200, 194, 190, 188, 192, 196,\n","        192, 170, 202, 190, 201, 195, 200, 201, 209, 227,  50,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0,  68, 225, 210, 211, 198, 192, 196, 204,\n","        196, 181, 212, 197, 195, 192, 206, 220, 210, 229,  93,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0, 111, 223, 227, 253, 209, 196, 204, 211,\n","        206, 183, 216, 206, 210, 203, 215, 244, 224, 227, 150,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0, 139, 225, 224, 255, 202, 206, 212, 209,\n","        211, 190, 213, 202, 207, 206, 222, 255, 230, 220, 190,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0, 180, 226, 224, 255, 199, 204, 207, 214,\n","        214, 190, 216, 206, 203, 205, 219, 243, 224, 214, 234,   0,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0, 225, 223, 228, 254, 209, 206, 208, 213,\n","        210, 191, 215, 207, 204, 208, 211, 249, 226, 214, 255,  38,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0, 250, 232, 240, 239, 211, 203, 209, 205,\n","        211, 197, 215, 208, 208, 214, 213, 239, 231, 219, 255,  81,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0, 248, 236, 247, 240, 203, 200, 208, 206,\n","        214, 193, 213, 212, 208, 212, 211, 243, 242, 225, 254,  66,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,   0, 247, 230, 252, 226, 199, 211, 202, 211,\n","        213, 182, 213, 212, 206, 202, 219, 207, 247, 222, 237, 104,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,  10, 244, 219, 250, 205, 199, 209, 202, 209,\n","        211, 189, 214, 206, 210, 200, 212, 154, 240, 208, 219, 140,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,  21, 255, 222, 238, 184, 210, 192, 206, 209,\n","        210, 189, 213, 211, 209, 192, 228, 155, 226, 238, 241, 166,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,  37, 245, 226, 241, 150, 197, 189, 204, 209,\n","        210, 183, 213, 213, 201, 184, 215, 146, 216, 236, 225, 154,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,  58, 239, 227, 255, 158, 193, 195, 204, 209,\n","        213, 180, 207, 217, 199, 194, 211, 158, 219, 236, 216, 151,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,  68, 233, 226, 243, 139, 200, 193, 205, 210,\n","        208, 180, 205, 212, 203, 196, 216, 157, 179, 255, 216, 155,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,  81, 225, 224, 211, 138, 219, 185, 201, 213,\n","        207, 197, 226, 212, 200, 190, 215, 183,  90, 255, 211, 147,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,  91, 210, 230, 158, 114, 205, 187, 208, 209,\n","        206, 193, 210, 211, 204, 195, 204, 181,  23, 255, 213, 158,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,  87, 205, 232, 109, 164, 255, 214, 224, 222,\n","        210, 197, 214, 225, 222, 211, 220, 217,   0, 234, 216, 169,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,  92, 213, 232, 146,   5, 134, 151, 162, 170,\n","        183, 182, 164, 166, 178, 162, 156,  98,   0, 240, 225, 210,   0,\n","          0,   0],\n","       [  0,   0,   0,   0,  43, 164, 206, 141,   0,   0,   0,   0,   0,\n","          0,   0,   0,   0,   0,   0,   0,   0,   0, 127, 125,  76,   0,\n","          0,   0]], dtype=uint8)"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"BUoXP10mgy8h","colab_type":"text"},"source":["You can plot an image using Matplotlib's `imshow()` function, with a `'binary'`\n"," color map:"]},{"cell_type":"code","metadata":{"id":"t2YjeboYgy8j","colab_type":"code","outputId":"cd6ef4ca-0f28-46b6-9393-28cf8cc8c9be","executionInfo":{"status":"ok","timestamp":1579317498603,"user_tz":-540,"elapsed":1135,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["plt.imshow(X_train[0], cmap=\"binary\")\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAASCElEQVR4nO3dX2yVdZoH8O/DP0EohdJSGoHtMIpg\nNAv1iGswE8U4UW9wbsxwQdgEp3OhyYzhQuNcjFfGbHZmMhebSTorDrOZdTIJYyTG7I5LJjGTEOIR\nWdtS1iIWKVbaQoGiyN9nL/piKvZ9nnre8573OM/3kzQ9PU/fnl8P/fK253l/v5+oKojo79+MogdA\nRLXBsBMFwbATBcGwEwXBsBMFMauWD9bc3Kzt7e21fEiiUAYGBjA6OipT1TKFXUQeAfBrADMB/Luq\nvmR9fnt7O8rlcpaHJPqS1zYWmfJn/u9aqVRKrVX8a7yIzATwbwAeBXAHgC0ickelX4+I8pXlb/YN\nAI6o6lFVvQTgjwA2V2dYRFRtWcJ+C4Djkz4eTO77ChHpFJGyiJRHRkYyPBwRZZH7q/Gq2qWqJVUt\ntbS05P1wRJQiS9hPAFgx6ePlyX1EVIeyhP0dALeJyHdEZA6AHwLYU51hEVG1Vdx6U9UrIvI0gP/G\nROttp6r2Vm1kNG09PT2ptd27d5vH7t+/36xfvXrVrC9btsysr127NrX24IMPmsfee++9Zj1iay2L\nTH12VX0TwJtVGgsR5YiXyxIFwbATBcGwEwXBsBMFwbATBcGwEwVR0/nsNLVDhw6Z9e3bt5t1a9rw\nlStXzGNnzbJ/BGbMsM8HXv2LL76o+NjVq1eb9R07dpj1J5980qxHwzM7URAMO1EQDDtREAw7URAM\nO1EQDDtREFLLjR1LpZJ+W1eXvXbtWmrNayF5Wltbzfro6KhZb2xsTK15/76zZ882617rbubMmWbd\nmyJrGRsbM+vLly8368ePHzfreSpq5dtSqYRyuTzlF+eZnSgIhp0oCIadKAiGnSgIhp0oCIadKAiG\nnSgITnFNWH10IFsv/cyZM2bd67PPnTvXrN98882ptTVr1pjHetNrvX6wN3arz/7xxx+bxy5atMis\nNzQ0mPUDBw6k1jo6OsxjPXn+vOSl/kZERLlg2ImCYNiJgmDYiYJg2ImCYNiJgmDYiYII02fPsy96\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"rHYKyDFYgy8o","colab_type":"text"},"source":["The labels are the class IDs (represented as uint8), from 0 to 9:"]},{"cell_type":"code","metadata":{"id":"55Tej-i-gy8q","colab_type":"code","outputId":"69f1e4b6-a074-4a78-be6d-bc8cf5c42ece","executionInfo":{"status":"ok","timestamp":1579317501534,"user_tz":-540,"elapsed":945,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["y_train"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([4, 0, 7, ..., 3, 0, 5], dtype=uint8)"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"4j5JBPsdgy8u","colab_type":"text"},"source":["Here are the corresponding class names:"]},{"cell_type":"code","metadata":{"id":"fiE4XdP_gy8x","colab_type":"code","colab":{}},"source":["class_names = [\"T-shirt/top\", \"Trouser\", \"Pullover\", \"Dress\", \"Coat\",\n","               \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\"]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PjRvZcezgy85","colab_type":"text"},"source":["So the first image in the training set is a coat:"]},{"cell_type":"code","metadata":{"id":"scQ3_sw2gy86","colab_type":"code","outputId":"56a44c5d-fcd7-44f8-f23e-784158790444","executionInfo":{"status":"ok","timestamp":1579317503463,"user_tz":-540,"elapsed":535,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["class_names[y_train[0]]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Coat'"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"og_ELQkwgy8-","colab_type":"text"},"source":["The validation set contains 5,000 images, and the test set contains 10,000 images:"]},{"cell_type":"code","metadata":{"id":"7R1dD75agy8_","colab_type":"code","outputId":"922462ce-ad5a-4475-e69c-2647b9ccfe48","executionInfo":{"status":"ok","timestamp":1579317505604,"user_tz":-540,"elapsed":1170,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X_valid.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5000, 28, 28)"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"FLuhjvragy9F","colab_type":"code","outputId":"b62e3c51-d389-4483-b009-249baacaa28f","executionInfo":{"status":"ok","timestamp":1579317505605,"user_tz":-540,"elapsed":681,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X_test.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 28, 28)"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"BXxhamXagy9K","colab_type":"text"},"source":["Let's take a look at a sample of the images in the dataset:"]},{"cell_type":"code","metadata":{"id":"dt0zdC5Igy9L","colab_type":"code","outputId":"59049863-f242-407f-b36f-71f55eb356e3","executionInfo":{"status":"ok","timestamp":1579317509466,"user_tz":-540,"elapsed":2644,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":473}},"source":["n_rows = 5\n","n_cols = 10\n","plt.figure(figsize=(n_cols*1.4, n_rows * 1.6))\n","for row in range(n_rows):\n","    for col in range(n_cols):\n","        index = n_cols * row + col\n","        plt.subplot(n_rows, n_cols, index + 1)\n","        plt.imshow(X_train[index], cmap=\"binary\", interpolation=\"nearest\")\n","        plt.axis('off')\n","        plt.title(class_names[y_train[index]])\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nvffeRZnevawYVhst67nVuPYmHWozUd1by4ratcYH23ZUJnmx7y7Vz6tt6vq33357ccwmJWh35CmR\nSkxhg2PrWfurY7a1VusaqfFZv2MtsSqzfVizLLWNpJoaGuCiiy4qPquNyPpn0/3K6ySVwlZjjbUa\nylKvdmqvpXbazim8q0HW9v2q37788suLMrXTVLKBajIlKzc6ltrRPuW5ISvliBEjutyrzhuoLLpl\nw3Ecx3Ecx3GcptAQNaA0b/pr/cS0irLaUflDKg2c9S0WKY1KKp1XNR2m1TppdWe1tUoBqBWjNIPt\niu7XakGrqUXtSr6aFjSlZUvVrb5nV7v6bDc+lM9+s1HaWvvutImeTZ8qWZIGU7EHALPPPjsAK6+8\nclEmbZM0zlYTJaoaA0inJUxtOCl0feuDut5669U8U3WDSajVRPRWO5xC8QNWvmXhs6mA5ScqjaTV\nBEnOrMZElkppomxMiL6rOrWWoVS6Wr0LWZJSMSqp9ikLja1/tY9UX9JfrG/+kUceCdS+E21Epfdo\nz09tYJXSQFVJbbAnebR1J4ufrF/W4qZ3L8uuvZ60uVbOpNm1dS25tT7RvSHVtyilrtVeasNHvXtr\n2VAdW2vBpptuCsCll15ac88Ahx56KACnnnoqAMsuu2xxTNe1G3SqrpR+1MqpZFdWEijlTe/bxh+q\nj7n55puLMqsdHAxsimSx3377AWX/lUo3L2y/VN0AEUrf7R133BGA/fffvxG33XJSqXvVB9m2pvaq\n/sbGiqU2ExapuLPqOGLlWOfZ+2n3+UkV1Ye1Rkie1P5l+Yau8VDWK0Z9p5VHtV2V2Y1jZW2/5JJL\nijJrAW0HND5JDqxsyIqv2BMo58hqf6nNOFMxvOqj7FivMVjn27g0WeytbFevP9ANO92y4TiO4ziO\n4zhOU/DFhuM4juM4juM4TaEhblQyr8gEndph0+6UKTOsTEnWNcG6qUA6+MheX2YfmYhsgJrux5qG\nZDKXK4s127UjqXRjVZNttc6gazAtlKZHa5ZUHcl9wx5TnVqTaKvcqBZccEEAjjjiiKJMO/daM/Pc\nc88NlO/Y1o3M2NbVR+9f5knr+iJZU33a4HQdSwXQ6zzrkqX7sS4XKVes6rFUylN7jd6ioE0FnUFZ\nfzato3bPVTCYdSlRwKJtg3Iz0DPbOpLsVHdKt9hgS50vVx3t3gulO5yuBaXZV9ew15K7jH0/9Vzl\n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\nsR/+8IcA3HHHHUXZAgssAMBEE2V6XrV3gMkmm6xRtw9tPGZccsklxefHH38cgCmnnLLmL5Ryaed7\nRx99NABTTTVVs2+zLfq9DiVZdz3FbAy4AjVQnnjiiUXZww8/DMDLL2fZtzRgQtl4F198caCc5AE8\n88wzALz7bpkSXfc/77zzArUd5bHHHgvANNNMU5TpemrsfaDtGu8vfvELoBxkoXx+1fsii5Qb7aqB\n2ont9ttvD5QTctvhrbjiio283aY03nqTkJtuytLCv/rqq0WZPmvR8emnnxbHJBuSQS0YoFyA2N/R\nccmS7QCXWmopoJRLgLnmyva/mmOOObp9Dov5rUGRvc8++wyAv/71r0WZBt57770XgCWXXLI4Jtkb\nN24cULtoW2aZZQCYMGFCUab3M+OMMwJlnQHMPPPMQDlgQ7/arGiLgeOhhx4CYOWVVwZg663L/Zek\nJDjjjDMAuOeee4pjOl99IsDaa68NwDnnnAPArruWm+Yec8wxjbztltSd7ef7+p610HriiScAmH76\n6Ytj3/1utmHuv//976LMTnb6cm+dMmb05n7tpHjbbbOtlNSfrbbaasWxN954AyjbO8D+++9f8zfF\nICn4Blx3v/vd7wB4++23izJNerVgVZ1A2ec99thjNX+hXLydeuqpRZmuoQXI7rvvXhy7+eabATjk\nkEOKMrX9fjCo85Xx48v9ktUutUg76qijimMaIxZddFEALrzwwuKY6sbOV7744guglNF55pmnOLbQ\nQgsBpfJvgLTFmNGhJOvO3agcx3Ecx3Ecx2kKvthwHMdxHMdxHKcpNMWNauzYscXnn/3sZ0DpWgGl\nq87UU08N1JrJZAJPmb9lgrQ++HLr0Pesy9Tqq68O1JoqZWLrh2m87dyofvnLXwK1rk96Ppm95SMK\nsOyyywK1pt4lllgCKF2mbH3MP//8jbzdhpkl65norYuEXMlee+21okwm3cknnxyoNYlLvuSu8o9/\n/KM4Zv10hXzFZ5lllppr2t9WTAyUsUkqszEe9dzBaKHs2fo44YQTAJhuuumKshEjRgDw4YcfArVx\nJ2qXjz76KFDGwEDaHUAmdLlMpe5DZnOAfffdF6gfB9MNbWES/+c//wnAmmuuCZT9H8A222wDlHJm\n3TgU22Hr8Lzzzqu55rnnnlsc+/GPf9zI226LulPswI033gjUugFJjhQDaMcH9fM2ZmPdddcFynrS\n+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\nbh/rc+0+fDaldG5Kac72diwh27fn2mdSSt9M00R7WxTFXyWdJel9kpRSWieldEdK6Y9tGd3b908p\nfbI9np9NKe1RnxtmV4qi+ENRFOdL2kzSlimlRXPzULfxm1J6c3u9eL49Jq9DTlJKX0kpPdaW6V/4\nOJ4diP7rzotuvS2KYlz/JD0o6fOS3i/pH5LeZm0nSHpW0rKS5pB0iqQfWnshaQFJa0n6raRl623t\nz4dKOl8tzf1rJF0g6YBRzmcrSf8n6YuSXqqWQP9B0hvb7deqpbV+uaQlJP1O0mrttq+r9QDxVklv\nkXSDpH3bbatKenS8/dKvf5Je2+7jEyWtLekNtb74h6StJb1E0jaSHpeU2u3XSPpMrd+2b9+rV7S3\nzRr0NTbcf2u1r3uOUdq7ycSbJG0s6ZVtuTxT0rn23bJ/p9s/SQ9LWr39+Z2S7pG0r29vt+0t6eT2\n53nb43aOjHx9Wq25Yj5Jr5Z0tqQftNs+Kel6O+b7JD0v6WWSXqXW3PCptlwuKekZSe9r73tCe3yv\nqJaS5OV96p+Y93ooY1322VbSuWrNRy9RS+P36nbbLEm/lLSgWmPwOkn7tdsWkFTYcWa1f2/hdv/M\n0d62Ve333inpN+3Pc7Tvx7zWvoakp9t9+PJ2n15V2/8KSW9QS4P7YP03humfOsf5K9VaR06ye79Y\ne1zNUMvqsaGN0T9LWknSv0k6uD0Out7P6fpvNFlVyzq3jTLzULfxK+kAtZR5L23/W1lSkvQeteaE\nudr7zStp/kFff/Rf//pHL7L1drwdtFJ7gnlz+//3S/qitZ8g6b/t/x+WdL/9v5D0VUmPSFq0dmwW\n5KSWJmp+a1te0q9HOaetZA/U7W0/lbRF+yb+U9JrrO0ASSe0P/9K0oetbU1JD7c/r6ohfNlon9vC\n7b5+VK0HjvPVcgfaStKDtt8r2/369oxwbqX2Ilvry9n9ZePjkp7s0j6qTGT2XULSc/b/sn+n2z+1\nJrk/tyehR9R6qHqFJj/5XSnp8/a997TnjjnUWkhekPSudts3JB3X/ryZpOtq53aMpL3an09Q++Go\nj30T817vZGysl43/UuulYLFM2yxJu9r/d5B0Yftz7mVjz8z3t6pt+6ykY9qfcy8bJ0ra3/7/2nbf\nvsP2X712Tpf1Uz4ncQ8Y5/9oy9CIvm7ve5ikQ9uf95R0mrW9UtLfx7qf0/XfaLKq1kv6bvV5aKzx\nq9YL/nlqKxZsnwXUepldXdJLB33d0X997Z8X5Xo7XrPvlpJ+XBTFM+3/n6qaS4GkJ+3z/6r1luV8\nQdIZRVH8fJTfeItaE9ltbZPZ85IubW8fjceKds+0eUTSXO1/vy+K4k+1trnbn+dq/7/+vaGmKIr7\niqLYqiiKd0haVK1zxi3gSdvvf9sfRws8+m1zZzm0PCvpzWn0GJVRZaLt4nFM21T5R7W0x69Ps4+/\n6YZFUby+KIp3FUXx+aIo/jKFY+X6cQ61LAJ/knSRpI+22zZXyxogtbTDyzH22+P/45Lebsfqt9zG\nvNcAKaWXpM4A8rnUWtyukHRG2zXim7WxOlY/O+ORE1yoRqOjr4qi+KOk51T1Zf13psMasmFRFK9X\nS5u8naSfpJTenlJaLqV0dWq5if5B0uck4cI2l+w622vLs/0+8SFgbkm/b3/2+z7W+D1ILc3zj1NK\nD6WUdpWkoigeVGtu2FvS0ymlH6bhcdlugui/ihflejvmy0bbd+4jklZJKT2ZUnpSLRP+4imlxSfw\nW5tK2jCltOMo7c9I+oukRdo34vVFUbyu6J5pZO6UUrL/z6OWxuZxSW9MKb2m1vZY+/PjanV2/XtS\n6w1y6CmK4n61FuhFJ/P1Mf4/O3KjWsH0G47S3k0mdlJLY7BcURSvlTSzvR3Zmx377wW1FgF4+2g7\n1sj14/+p5ZohtXzoN08pLa/WQ8/V7e2/lfQTG/uvL1rBxNvYsfrWzzHvNUfRijl7tf17vCiKvxdF\nsXdRFAurZVH6D7UWv0n9RLf/p5T+rf0bV4yyv1Trq3afvkFVX0otSxJ4Xw417f4/Wy1LzUpqvUSf\nL+mdRVG8Ti23FeTrCbWsOZLKcfGm/p7xYEmtjI9zq2Uhkzrlpev4LYriT0VR7FQUxXxqJZj4ErEF\nRVGcWhTFSmrJWSHpwD5dUl+J/hsXs/16Ox7LxoZqTUrvU8t9ZAm13HmuU8snbLw8LunfJe2YUtqm\n3lgUxb8kfV/SoSmlt0pSSmnulNKaXY75Vkk7pJRemlLatH1eFxdF8Vu1/JEPSCm9PKU0Q9J/SiLg\n5jRJu6eU3pJaQYh7WttTkt5EkM2w0A7m2SlVgcnvVOtN9aYeHP4pSe9oL8KzJUVR/EGt+/y9lNKG\nbWvFS1NKa6eUvqXuMvEatSbE51MrMHWv2uGfUstncnbiTkkfbffR0pI2Gef3TpP0xZTSu1Mrpd/+\nkk4viuL/2u0XqzU5fr29/V/t7RdKWiiltEX7N1+aUlompbRw7y5pQsS810dSSqulVgDp/5P0R7Vc\nAf41xtfGS318riLptqIoXpBaD99qaet9n9Mk/WdKaUZqJYo4QC23A08PvEtK6fUppXnUcqM6vUfn\n2yipxQZqvTzdp9b89vuiKP6aUlpW0sds97MkrZdSWqG9Puyt6kVktial9NqU0rqSfqiWS8vd9X3G\nGr8ppXVTK4lBUssH/p+S/pVSek9b5l8m6a9qrS+9kvehIPpvQsz26+14Xja2lHR8URS/KYriSf5J\nOkLSx9MEUqcWRfEbtRbeXVO+LsFX1DKZ3ZRa7ipXqKVRHo2b1QoafEYtf7RNiqLAxLu5Wr5uj0s6\nRy1fNDRZ+0m6VdJdku6WdHt7GxaD0yQ91DYvDYtp7k+SlpN0c2plB7hJ0s/V0rpPlavUClR6MqX0\nzFg7T1eKovi2pC+plWrud2q93W+nVmDqqDKhlqvaK9SSs5vUMvM635G0SWplqjq84cvoF3tIml8t\n15F91NJ+jofjJP1ALVezX6u1EGxPY1EUf1MriG11P2bb5LuGWibfx9VymzlQrWC2QRDzXn+ZSy25\n+KNac9EVGr/MjcVhamn3nk8pHaJ8ytu9JJ3a3mejoiguVWuBPkct7f48GmlpuUCth4Q72vud0KPz\nbYoLUqsA4h/Vkpsti6K4R60ECF9PKf1JrRfQM/hCu317tR4Yn1DL3/xpTTHl+pBzQbsvfqtWnMEh\nagXSjka38btg+/9/Vsu6fmRRFFerNa99U60x/KRaCoSv9v5SBkL038SZ7ddbshUFQRAEwWxPSukB\nSesWRfHAJL8/h1qWl3cXRfFwL89t2GlrT5+XtGBRFL8e9PkEQTA9mBZ5wYMgCIJgqqSUXi7pfyb7\novFiJKW0Xtvt9FVqpb69W63sOUEQBOMiXjaCIAiCFwVFUfy1KIrpHEg6CDZQlYBgQUkfLcIlIgiC\nCRBuVEEQBEEQBEEQNEJYNoIgCIIgCIIgaIR42QiCIAiCIAiCoBHGSt8YPlYVk8ktPuX++9e/WmmR\n/9//G/298Je//GX5+YUXXpAkvec9rcxxv/1tVQRyvvlaaeSvu+66ctuKK64oSfq3fxtZYoPfTlY/\njM+436U07m6ZaP81Invdzvvpp5+WJF18cSsr5rPPVoVy55xzTknSOuusU2573ev6VpKgcdkb7/38\n+c9bhbAXXXQytSQ7+dOfWoWun3mmlW353e9+96jn5UxA5sqvTHD/mPcqhqLvmIt22GEHSZ0ysNlm\nm0mS3vzmVtHrv/ylKsj761+3EiadfnpVAuP973+/JGnnnXeW1H1ulaR//vOfkqSXvOQlEz3tgawZ\nsxF9lz3kzOcd5CM37yy22GKSqrXi1a+uanH+8Y9/lCR9+ctfLrfttFNnpnp+z48/ifktx9DK3j/+\n8Y/y80tf+tJR9xvPs0+DNCJ741lnXfbq+51zzjnl55tuapVYe8UrXiGpc356/vnnJUm77LJLue1t\nb3ubpIn36yTuQ/bixorZiImvYmge+Biss2a1CnJecsklZdtBBx0kSfrIRz4iSdpuu+3Ktn333VdS\nJaS+jf15qG6AgT20dBu8X/rSl8rPDz/8sCTpV7/6lSTp5S9/edn2qle9SpL0spdVaah/8YtfSJLO\nPfdcSdKMGTPKtr/97W8j9p8CjcleN5n7/ve/L0m67777ym233nqrJOn1r3+9JOld76qKlyI7tPHi\nK1UvFI89VhVgvueeeyRJCy/cqiO0wAILlG2f+lQrLbu/gExh8RmKB+ZpSiN91+1ePvnkk5KkE088\nsdzGHMeC+eCDD5ZtPOg98sgjkjpl5v/+r1Xbaskllyy3LbLIIpIq+eSBUZLWXXddSdLb3z6ygG8f\nFCxSyJ4zlOP25JNPLj/zMPfXv/5VUrVOSNJzzz0nqXNNvfPOO0fsV6fbejUBBip7uWv4/Oc/L0k6\n6qijyrZTT22Vfth8881HHGOjjTaSVM0HknTaaadJqtYdf1nr8UtJX2TP+4m5qtsL2DzzzFN+5mWW\nPvCXOORxgw02KLfxnJKD7+Z+u1cvG+FGFQRBEARBEARBI8TLRhAEQRAEQRAEjRBuVOOncVeW8ofM\ndHrHHXdIki644IJy26OPPiqp8g993/veV7Ydd9xxkqT//d//ldRpnrzoooskSausskq5jTgOfueN\nb3xj2faBD3xAkrTGGmuU26ZgqhyYSRzzpCTNMUcrTOlb3/qWJOkrX/lK2YbJEfOkfw+zt7tW4bbB\nMX/605+O+G38vaVJ+XxDY7JXN5G6Wxky4W4AmFtxgXrta19btv35z3+WVMW+eBzQ3HPPLUn6+9//\nXm6jT3F7cbcrxsS2225bblt99dUlVfeFfh8HQ+mOMU1otO+I2zniiCPKbbfffrukSp4kaf7555dU\nyY+7DPzhD3/o2PbKV76ybMNFyuc1XBtxdXQ3DT67u8L2228vaVIxWuFGNTUGNm7dPefggw+WVLnw\nsP5K1RzG/r5msD77msF3V111VUmVq5AkfeITn+jV6UtD6EaFaywxkZK0/vrrS6pcdp1NN91UUuWu\nLFXr01ZbbSUpv7b3iEZjNvg71vMUc9rSSy8tqZovpWoew43UnzV4rvP+IbZt1113Hc+pToVwowqC\nIAiCIAiCoH+EZWP89E277NmlsFT4WzsaNgJxCQaSpAUXXFBSlTXo+OOPL9sIFn/ve99bbiPQkrdk\ntNJSldXFtYJbb721pCqQaALBbH3XUuWyyGAh2nvvvSV1aki5XrLa8FeqMj6Q5UGq7hfHINBZkg4/\n/PCOfaZI41oqrDI77rhjue01r3mNpE5NMZ+feOIJSZ2Zf7ByuPUC6AfXVr/jHe+QlA+W/N3vfidJ\nestb3lJu+8EPfjDu66kxFMkJYKJBn8hxLnPNRLV5uSBnLErMNVKlzVdDfUeWvN12201SZ1A3c4tr\nhBl3yIWPWzTIJCHwPn/DG94w4rfZH+uFz29YK7FuSlVf7bPPPh3nNw7CsjE1BjZu3/SmN5WfGWPI\niY8d1l5kzi1iBIj7GEV2+J6vt+utt54k6dhjj+3FJQyd7K255pqSqmxwUuVlwRz3+9//vmxjP8+o\nSZ+ipe+R50CORmSvm1X+mGOOkSRdc8015bYbbrhBUrWmerYzntmQqVxf+PMHfcdzzbLLLlu2kWVz\n7bXXHs9ljEVYNoIgCIIgCIIg6B/xshEEQRAEQRAEQSOEG9X46ZtZcr/99is/43biZjdMabhReRvm\nWVxg5pprrrLtZz/7maTOHPL1ehBuisPs5m5aiy++uKTK3DbMblQ5VlttNUmVudbPue5i4gGhuA3l\nXIToO3ftwCR+2GGH9eK0G5c9cqB7DRbky83T1DngWh944IGyDXMu8un9gYsLxSalykWK/Qj0lap7\nQaIDSTrppJMk5WsgjMFQyN4gwQWL8e2uQLgmvfWtby232bhupO8I9OS3PQlFrs4NPPXUU62TsnGL\nvDFe+b5UzY0+R9IXuEZ6AgRk0F0HkUH2pxjgOJjwuH3++ecLqfMamHN87Ljr13SGZABer8dcmPo+\nbqkj5MVbfQ2VOtdIYI6cd955y20UlHQ5rgcG+9qKHHvR3SkwdG5Un/vc5yR1Jg4hgQ3PGr5mIAfe\np9yLPhT664vsfexjHys/k8CHZzepmnNyblc8d9SDzqVKHt31lm3Ir7s0s9/+++9fbuPe9CohS1g2\ngiAIgiAIgiBohJ7mCgumBm/1ru1Ag+daX7ahefa3V96ECdx9/PHHR/yOa2Z4G84FobLNtYiucau3\nDSv+xo8GhfP2viCtHG/8pJSTKi2Lp3qlr9BIuabANfLTAbRpuSAzrBJSpVFFO+VB8WjyCOb1ficF\nqQfdE5iM3HvqW2Tb05LefPPNkjqrok5HulWizmmRSPbgyQlIS91N25SrrpvTCCLbniabOShnXegF\naJCpGk+aZamysHiQNttIgevjq67hc0sFwaXMi1LVB8ibz5G0eeIDrBwPPfTQhK5xMmBhfOyxx8pt\n3GsPlOX6OU8PaM4ls6jLXM4izfznlkx+hz6WRsqSa6o5lss2csh8eu+995ZtJIlwueR6vdJ0v5g1\na5akzv6hjxkLLkt1i6HLEsfwMeRyJXVeN/Osp9alf2YHGMPM7VJl0WKse98ij77+sP76OjwdwaJ3\n9dVXl9tIV1uXESlvqcArhbHm1mrWEU99C6wZPmew35lnnlluYz3oVUrhsGwEQRAEQRAEQdAIYdkY\nIvBHdg0vb/oeK8AbLFqRbm+vxBpIlYbOtSnd3lrRZrmWilgHtPieim1YIZ2lVGnX8PvPxa/Q165F\noC+877gP3CO3bOQsSsPIb37zG0mVHLhmCe22W9qQTbR1bglZaKGFOo7tbfSfyzb9i/bUNaT8psvn\n6aefLmn6Wza6WQNz4/Eb3/iGJOnhhx8ut+HXO3PmTEmdhZo4Rs6KQfrWq666qtyGBhyrgdSMReO+\n++4rP6O1XHTRRSVV8WRSJSuuvWSOwzLp6ZLr1lnX2OW0hMQdoUF2Kwn3xn3HOT7Hck2rW+p6AXEn\nd911V7kNq7bPVaQ4R0vsFmfmeR9PnDtzVG5sgmtI0Tj7sZAv+sXXJrb5msRv43vvaY45HzS99fZ+\nQwpwH4f1GA23erAffejfo+98HUFuc+sz/US6U0n6yEc+MtlLGTqQS+K0pGrNRX69QDF96rLUlKW1\n3yDv7rFCmm6ft7n2XJxQfR9fp5Ev77t6UVKf49jfUw/3mrBsBEEQBEEQBEHQCPGyEQRBEARBEARB\nIwytG9V4K+/uscceHX/d3NstrW/uWFTbpqqlVAXt9AOqebvpi89u3sK9IJcGDtMjAUU5s6Obdekj\nzGhuWsM8njPr4UowHdyoPOCu7nLhcoD7ANtybihuJq+7Vrlrxz333NOTc28a+ob76i4VmLjdrQK3\nh1yAHnJFH/N9qZIld9NiP77nv1MPfpNGJieYnegWNI7LFMHUUnW/Lr30UkmdKQu32WYbSdKSSy5Z\nbqNS8dFHHy2p01WFObObqb4XeBA48wa/6fMOriUeqMwYw0XKxybywzY/FgG2Pn8iZ+985zsldbpR\nkZDAk0PU5ziXw167Ua211lqSOl3O7rzzTkmd6YFJA41b2XLLLVe2MUY9fS/nWXeZkqo1gjGacz3z\nYH36lz7yNYa+dJdSZA/55Zyl6r647HmF6X7DvO2yV08/7/MaY4d+9b5jTHuSC+QXGcy58F188cXl\ntunqRpVLQMD9dxdOEiHgYudJDXLpnf35bjpDggx/nuDacynI62ulNHKt8PWTudD34biMR58LGPs+\nzn/5y19Kqlw2p0pYNoIgCIIgCIIgaIShtWx0C6I8+eSTy88XXnihpKoY2eWXXz7iGLkUkGhXtt12\n27LtsssukySdddZZ5bZ+WjZIbejXjsbH34AJ6kU7mQv04Tr9ezmtdL3Il/82b7uuueJ4vPV6wZ1h\nxVNWcv4EKueCqnJ9l0sZiVaKwCvfnz5zTZdr9YcFtCnIhgfXopHz80abiQyNN/Wqf4Z6oKlrrbCc\n5TRk3awAswue5pTgaU+DiYyivV5mmWXKNuav4447rtyGdp4ATO9XxkKuYGUv8YKRzDto8H0O43y8\nmBqykbvnXAuy7GOa77mW1LXuUqclmX73/iGYHRkmiFjqtCj0ApIfuOWGIFIKqUrVurXhhhtKqtLF\nStUaeN5555Xb0E4yZ/mcztyPRcHXh7nnnltSp3WYtZNU17fddlvZRpIBkjlII9Nke2piLAgeNEzh\n1UHAeHJLmMuT1CkbtOVSJiMvLtvIWk6TTL8gb7Mb9IOPN7dySZ1zHHI/uxSwdBg7bkHDYubWHdZj\n2nLeFrm11a0cwHGx6Poak/NGuP/++yWFZSMIgiAIgiAIgiEnXjaCIAiCIAiCIGiEoXWjwszuZqYH\nHnhAkrT11luX29Zbbz1JlduF52mmUmnO9PTpT39aknTFFVeU2zDhzTPPPFO/gEmAKdnPF7NWrqp4\nLrgOUyXmYDeLYW7z3M6Y2wgg9CBOAjWXWGKJchtBRdQEmQ74uXL+mLFdvui7XEVO7om7mrBfPYe9\n4/U2vI7BsECAHsHtudz8np87lzse6u5NuYBj7z/6G3cqPyZBbO5Kg9zi3uXuGNOdunvQJZdcMqLN\n+7Neldnd2d773vdKyrt75ILxwV3omgCzvFTNXcifu59wru6iyXxGm58/2xjbnqgB1wGv78JvI+vU\n3ZCqOdjdW3A94q/XRth+++27XPHEwcXEx+Fb3vIWSZVLk1S5zeGa5vP2yiuvLKnT/aFeRyfX3xyD\nsSdVa6K7Uv73f/+3pModY6WVVirbCJ4/++yzy22bbLKJpMo9ywNTcefy/ubcPMC9X9x4442jbvv4\nxz8uKV8xnXHlbay97rLGfvSxV5Cm5szsQM7dkfXR3aJw7/z5z38uqXPMs3+ujth0h+cCH1fIvY9N\n1kjmu9y87W56wHFd9hh39UQuo0FiCp6xp0pYNoIgCIIgCIIgaIShtWygcSYYWqq0OTNmzCi30U71\nRddqkUaQ9JAO6eU8AJw3Sk9H10+wzrhWgM9ujeA8qR6bq/qYC8ZCO5+zhNBv3t9YBN7znveU29B+\nehDTsOP9w7XTh65Npy2XHpL9vD9JSUpfuAUFjXw9AG7YIEgMLaKn+eS6PL1nXUPqWhW0emzLVSl2\nzUxdY+UyjgXE7wXHJVh1drJs1EGrJFVj0+cFtH70U07T7xoy5tNc8gO2uRW0CTxgndSPWKtvueWW\nso15MCdbufPn2hhrri2kX3wOQKOHHLmGDw27p58kCJz1p8mkGFyXB3djrXeLA0kArrnmGknS7rvv\nXrZx7n6eu+22m6RKq8zaKFUJNEj7SpC6JO21114dvydVmn4C5a+//vqyDSsMler9M+uVw73ye5Cb\nfwfJ8ssvL0l6+OGHJXWmjUa+WB/cUs549XHLGFt88cUlzV7WjLHA08QtG4xnrF6+BmCN9HUVrxM0\n9rkEItMBnh08GUCuEjhzOHKWu17+5pK1+PMN8yN9l0vh7JY5gth7RVg2giAIgiAIgiBohJ5YNsaT\ninK8Rfrg5ptvliT9x3/8R7mNojDuW4y2gbc2f5NDe+agNcsVGeOt2ovOLLbYYqOeY69Bq5Z7Q/V4\ngHqKSu/beiE+/x774Wvr7Wih3bcZLY370+I37LEIw45bYbhetnlfY9HKadbQAvibP33M/q6VwbKR\nszoNE9xbLBuuTUbDkkuJimzkLGe54lfInscj1cegH6teaMyPO51krxs5LRXzmRd1Y97LpUlE4+X+\n7TkrXN0y4Noz5LfXBerqeFpL/1yH1OYnnnhiuQ2NOXO/9x3XhHU7d22eWpU+Q0tKn0vSF77wBUnS\nVlttNZ5Laoxzzz23/Iy1+UMf+lC5jXMmxaxb6LHY3HXXXeU2tJQzZ86UVBWwDn7sFwAAGedJREFU\nlSrZIxZlv/32K9uwRnziE58otzFe11xzTUnSV7/61bKN4+asP/xOrjCby7Z/HiYWWWQRSZ3rIdfC\nWMuNaZ/zmF+XXXbZEcevF6ec3SAmaKONNiq30UeMa5djnsOwAkiVJb5X6VgHBc9ZuXvtMoS8IBs5\ni2698J9UPc/5+lkv9Jcr4OsxHp7uuhfMnlIdBEEQBEEQBMHAiZeNIAiCIAiCIAgaoSduVHV3qJwp\n0U36ufRdgAl3zz33lCStuuqqZRsuPB7EXHfPIOBQkj74wQ+OOP4666wz6nlhVjr66KPLbTvuuOOo\n59prcOPxIHfO0wN3CS4jYNBTkxJQVK966sfP3R8ClTzNLUGb7opFH3H86RCg5UHa9UConMk+l7KV\nbbnUsBzDj8X+pCYdVpAh3HDc3YSgU3crpHJ8LtkA1NNB+ueci2A94YGUryzMvJGT7V4yUZfP8VJ3\nk8gd89hjj5XUaeJmPsAFVKrGq88LQN/5PFJPnehzMPNC0+4r3q9107//NgkpcvKDrHiVa7bhxuhj\nlO95MgFcitjmawBuRjly6Z6bcnnxiuCkafffP+mkkyRV49bbWPc8ycCZZ54pqXKT8ArfpHQlKP07\n3/lO2cb6+81vfrPcdtBBB0mSdt555xHn/Ytf/EJSFbguVQHByKy7auAm4u7Mwwp97W5UkAsGz60Z\nbPM0xjC7uk/hsszfd73rXWUb/ZFLUkF/u4toPR3ysD5zjEU9pa1vW3/99cttd999t6Sq73yc15MT\n+FqcSyePSxUJJNw9jdTDLqu9TtQwe0p3EARBEARBEAQDZ1yWDddIoQXKpWfNBURBzppx2WWXSZI2\n33zzchtvX1/72tckVW9cUvWWlyvywhuxBx4SZOlB3hyPQk4eEMub3IMPPjji+E3CORA05G/v9L1r\nc7FkoJH0VHK83aJ98WB62rz/eANGA7/wwguXbbNmzer4Hd+fc3bNfdMBppOFwmFSJaM5TVo9yM+1\nAmgBcgHl9L9rmelrDxofZuoWK6lK8eiWobpmyQPQuH7Gfy4Y3OcN5gQsZy6rb3/72yV1WjEJEm46\n7XJT2jL6AzlzWSItJGPOxyEa4VxaSOaxXPFOv5dorJBt/20sIE0H3ufWjJxljHN1a0Rdi+fzDuOQ\nMerHzBVFJeAei4j3XW6dGkTgrhezJGWwWyMYh2iJvW8J9M5Z+Y866ihJnVYv7jspdj1gnkD52267\nrdy24YYbdpyrPx+wn1ue6oUKvY+ZF9w6P0i6JbtBXnJrB5Y5H1f1IrFS1QePPPJIj854+Ln99ts7\n/u8adfqGed7T7COX7t1CgHjOMjSdyMkZc/pSSy1VbqNIpqe9hvEU58slD2LN8PWWe+TPw6yz40kA\nNR7CshEEQRAEQRAEQSOMy7KR00ZOhc9+9rOSqtSGm266adnGWy8WCNe2oZ1yzRVvd7nYBrQI/ia9\nxhprSKo0O6695u0Rv1OperOcf/75J3SNEwHNJX/9jZO33VzhKbRbrl3m/qCF8XuX258+QjvoliHe\nbF2LULds+Bv3sFo2POYE0E65j2K90I7LDZpUtOtS1ddoPHO+uZ5KeBipax09VS8aENeoE1eRK9xX\nxzXB/I7vX4+b8v3R7lx44YXlNu6ZF0IaVrppgxhDLhv77ruvpCqlo3+vPj9I1TyXszSDx0Ewz3H/\nvK+R435a4XKpkAG582tiLnIrLlDklZgWv26uyf2P6Qvmq5x12xmEZYO0vJL0/e9/X5J09dVXl9uw\n1lPwzOftXLptrDmMc7dQ3n///ZLy8xjp4339IV6EQn9ulaC/3VqErDKf5uIahkVTnRu3FABGvnyd\n4zrHG+fFNlIbf/3rXx+xjz+TzA5xHMQOIXM+PnnuyI15nvfcKlmPO51uMRs8u3FNPtaYhzz9L+Op\nHtvi23J9UH8ulqrnPn7TLSjMMS7HPDfx15+HJsP0l+QgCIIgCIIgCIaSeNkIgiAIgiAIgqARJpz6\nlgBGT6uHOQfTDSlTpcr9xPfHJWmXXXaR1BmAStVC3JcczD+5QENMdF4dG3MUJjpppAuD/44HEgNm\n6ibdqOpVvB1cJ0hXJlVma1yl3OxKWkGO9eSTT5Zt9JGnGK3fOw8czKVU4zO/PewVsqXOAPd6qk0/\nf0yctLmJEzcOd7moBwC6iRPz+rC7/DD2ckHuBOh6qkeCxjED55I1gPcHn11W66lWvY3+9vvDMXLj\ntGk4Nz/H+n3PzUs5cBH1Ss2459H/Pi/Rx7kkEbn+r1eWlapxjcuU31PM655at2non5z7CbLo8w7X\niVtBLgCZ63AXHtrc/Ze5C9w1MudGNQhXDXcX22GHHSR1ztsEf5Ma2vuKNdfdfeprp6efpb9YHwjC\nlaq+IT2uJC299NKSpCuuuEJSlehFqtLiPvTQQ+U23K4Yy35t3J9hcaPKuS19+9vflpSXVbbR/x4g\nzja/N9wH5hFPgIHr3OzmRlV3w8k9M7Cu8LwlVXOhr0n0N2O91+lZm4bnsW6umSuvvHL5ue4a6nNR\nPUA85zabS4fL+rnIIouM+B134ee4zLnhRhUEQRAEQRAEwVAyLsvGXnvtVX4+/vjjJXVqTdC4oD3y\nN6w3vOENkjqDUdCgkGLPtQFYIdB+uLaNYGTXVPPmxn7+ZnzjjTdK6tR08SZZf0P2c3Vcg9YUaKLq\nha6k6s2dID6p6st6Kk1p5D1wq07OEgL0g7dxn/z4dS2ia/qHFb/H9Blv6a7x5HrZx68NOXBNAQHL\nWMm877pp/IcJNNz0h1tzwC2PaJlyRR3HQ84ywPj3AGUCWn0u4TPWz6bIBR/m0vmOB7fCnHLKKZKq\necnT21JMs15wTqoKKbqsch45K0a3FNe0+f7INilTpUpj7lr/foEM5iwUOXmrW358PeE63GLLnMq8\n6xq7XFrTQVg2fO65+eabJUkrrrhiuY1EAngM+LyEnHRL0ep9i5WD9Xjeeect25BVh3WYwoMkN5Dy\nfbX//vtLktZdd11JnWlfOW8vYjhsoImnn7rN7bnClbn04MypHvS/5ZZbSmq+uGa/4VpzyRro21xy\nHLb5moR88Qw43Swb9We9nOXB+4D5a6GFFpLUad0ezxqQe5ZkjfH1B8uizzvMI5yDJ6GYDGHZCIIg\nCIIgCIKgEeJlIwiCIAiCIAiCRujqRvXTn/5UUqf5/jOf+YykzsremFX566Z33AHcFIb5J+eKQ2AZ\nAXAeyIjpzM8HExImIm/LVSzFvISJ2c8VNxp3YVh00UXVNPXgslwtgpyZvB7omDumBwJigsvlasa9\nxU3EfNdNlQR7YYbPuWQNG1SjlioTfs5VimtCNrx/MW3mAti4H+6q0XSV617B/eY+urxAzuWG6+tm\n8nf3gXp9Fqmzv6TO/iZ4zY/Pd5uuXdLNbea+++4bsR/n5UGx119/vaTKBUqqXBrXXnttSZ21Dggc\nRL68n3BD8L6ou1z6mM7VlcFFlPvg4zYX/M4xBuFGBbnz4XpdTgmmp82DjZnf3PWWcYsMj1VBfBBQ\nzVuSrrvuOkmd9agIqAWXJfott+7l3AGZA+gPqoZLlXvy2WefXW7D/YLq5X6seh0EqapbdeSRR0qS\nvve975VtJ5xwgiRplVVW0TDhCW1wfWEddLns5kaac2esu2h6VXjcqKZb7Ygcfs30Q65yNeMaFyuf\n9+gH728SY/iYnU6wxiEHPi/hSsuzr4Ps+dpXd3nulsBAqsYpa42vtyRT8jWMebJX9ZfCshEEQRAE\nQRAEQSN0tWzMNddckjoDSXgbImBFqrRl9957ryTp7rvvLtvuuusuSZ2B3mhheKvzNyyOxfE5B6my\nOHggN9qbXFBcLkCObbzx5SpI+7liwWnSwlEPbHStANpM3nqlkcHcOU0LGgLXAOQCxNk/lxJzmWWW\nkdTZH1gGeNMe5kDoXIBePdDUNQX19HIejEWwmqfhYxvafpelyQZQ9xvGA9ontwKh6fSAW/oIjZSn\n46yTCwbPyQu/7Vot0kDmAgD9vjTJ7bffXn4+9thjR/x2PQjPtVSk4CYoVqrGH2PSU4wih+zjfc4c\n6Ckj632QsyJ5oC9aLYL9HM7HNdT++4PCNbzIDf3k59pNE4z8uGW4nhYyNz8M2sLhmn7GqFtL66li\ncxbmXDKDXF8hv/yO9wcB4p6UYbXVVpNUyY3LCvOjr+msKVhrqH4uVYlg3JIzDNx2223lZ+Yl5j6/\n3lylZqBf/d5wLO5N01baQeEp33neQ6OOpUiq5IWEQ56kgr7xJD142+Se7aYDrBHIkj9vzZw5U5J0\nzz33jPhe3YPHt+Wqi+eSnPB8wjm4dxLPl1ghnbBsBEEQBEEQBEEw1HRVX5HqylNe8Sbmb0D4JaPN\nc2sEb1+uiav7GbsmhbfYesE0/+zb0DJg7XCrCuli3de5rrHLFb7yN280XE1aNurazJy/Iz51UtWX\nOesCb69sc207/exvwByL33FLCL6V3n9ouNBE+Jv5sFFPrerbcoVw2C/3PfrMNZ51bX0uLa5bCoaR\neuyKp7Rm/Li80F9onXz/+rFcLhlbHk9AH+F/T0o+qer7XDE2n1+aZKeddio/o0l2iy7a2FwcBH3g\nMkE8BrFtudgsxqhbMein8aaxRpPox8cXl/Hu1uGc9SgX99EEOY1wrrgp8xh96IXhOFc0/y53uSJ2\n3C/6dawigIO2TjKHeLxYfQz4XMX1+HnX571czA5rL7EVUtXvXmTy/e9/vyRp8cUXl9QpP3z29LZY\nKXfddVdJ0ne/+92yDSvJsKV7vfbaa8vPdQ+CboXVcrEwObheL7qLNWCqxdOGAR9TyCay5NdXjw1z\n6x394YUPkdF+zU+9huury41UWXk8PorxNJ7U67l5z4/P3E//X3LJJWUb/Z9L3ewW+6kQlo0gCIIg\nCIIgCBohXjaCIAiCIAiCIGiECUcBYsYieLj+WeoMDiK42N1t6pUh3YSKmQj3DDe5kfasW0Dg8ssv\nX37G9OspNuuBM25+xtTubl1TrZo4HjA5Yrp3cxhmN09tyDb29/7m+jimu6/lUiJCrhI4/eEuCLiA\nkDSgVya2JrjlllskdVbArgeI+3XTRl/n+sQDH+vuU94X3COvELvNNttM9lIaox5k5qlOkSt3k6gH\nc+cCiTmm9xWB5O4iUw+89P4jUNADAZFfHwtNQKrRNdZYo9xG0N6sWbNG7Ifbpad05Hpdhrqlq60n\nffD5MtfHfDfnToVc+m/XXQSpFi1V86PPI29961tH/GYT5AIZCUh0WWHdQR5ybrn1eVGq+sD7Yv75\n55dUuaXl+m5QcD9d7hdYYAFJ0uOPP15u22KLLTq+59eHbHj/MYaRg1zSB/76+odM4AolVXJOetgV\nVlihbOM+eiINUrout9xykjrdAX3MDBOefrS+XvrzSt3FKudGlXOVwQ3Vg28J2PVnmOlKzoWP5z2X\nbWQUt1F3j+LZz5OQ8Jn5a8aMGWVbNxejYYHry7m5M3+RVEmq3F1zKaXrc6fPoTnXT54JeY72JAir\nrrqqpLz89irN8PDfnSAIgiAIgiAIpiWN5Dd0a0S/g508YNU/DzO87WJBcA3jY489JqnzDbiePi8X\nGJTTtteLBzocIxds7kFs9fR/Oe3/sECKRdekcd5oRl2DS7/nguVzQc9o2HNBuuuss44kaeONN57i\nVTQL8sK1umUD7VGuMCQym9OEsC0XMO1awm5pRtGauoYUbU3TSQl+8pOfSOoMcl1qqaUkdWrUsdqS\nTtYTS6Cpcy1xffy5JqqegMCtsWzLjVv6xzXEHCuXBrxuTfI2T8OJBbNpzXPOslG38kjV+XKuHkDP\nGKbQnQeZYhHxIFO01vU0zvXfHAS5oprIgqcgP+qooyRVa5yPodz9p0+QQb//HJ9tPici025NxFpL\nQge3AjDnXnDBBeU2zvvcc88dcW25lLc5meg3noKVfsmNnW4B4rnU9D4fSJ3WJ2R0drBs5Irzce2e\nypY1JreeMNd6nzFHcQ+mgzXDYa1AXtxr4I477pDUub4xhrvNS7nxkktmwH6suz6HkuTJnzPZzz1D\npsL0ulNBEARBEARBEEwb4mUjCIIgCIIgCIJGGHyZ2KA0m2HCclcNzOpuxu5W3RdTGd9zc2bOhF43\nrblZN1dRHVcjTJvDUGl4NOgDAnkl6aMf/aikKnjc+6JeOdxNl7kgqXpgpe9/0kknSRp+M289oYAH\n4913332SOk2xmF6Rq1y+fmTDXTvoU+8PTOfImR8Lc7nLPbLXtKvL7rvvLqkzGJzc5+4qBbgaeS2e\nXM2cejB+LjAZk7V/j8++P/1CDQZ3gcK1xgP0+W7uvuFq6bWTLr30UklVIoimyAUy1l1NpOoc6Tuv\nE0K/Im9egwM31NwxqeDu823OLbSfdTZyrkNf/epXJUnnnHNOuY1xeuKJJ0rqnKNxvXBXPGQImfBr\nov+YL132cq66uL7gmuWudriF+HW8973vlVQF5ns9HdwThw1kQ6qC43PuKsgjbbkaMbm6WTmZoq7R\n7IAnM2CeZ1z6WlpPCEQ9IGmkS7gf1919phO4p9bXPqlyZfI1r+7Cl6v9lXPXq39f6l4XzIPS6/u7\nW+pUGO4noSAIgiAIgiAIpi3Dq5Z+EcFbLpo5166hscqlH+VvThvGW65r7erf999Cq+Xa0AUXXHDE\n+dR/e7qBVo4gNb9e+rGuTfA272s0NGgiXGt/ww03SJJWWmmlnp5/r0FTgqbNNSek3HRNMfedoHuX\nA64frZMHAtZ/T6rkHVldYoklyjYqdedSU/fLWuT3js+uIccSQApB1w4hV7kkA7kAcY5LdWb/7Tnn\nnFNS5xzggfyStMEGG5SfsUjxPWlkeuFc6lhPw7nuuuuqH+TmLuTHZate+dr7FflE6+naQq7T5Yi+\nrlcvHo1BV7dedtllJVWJC6TKerHjjjtK6hwTWLk80LTep65tpz9yVe9zY43jI49uVaNPXVaZKxZZ\nZBFJnUlLWGOcQQaG0y9zzz13uY3zGU/QrctKLo0y36Wv/ViPPvro1C9gSHDLDXMh8xHafamSS9ZQ\n7zPGsY91ttFvfqx+peueCvVnNh9r9eQ7Tn2d9u/m0i6Dy1f9+G4doo/9GLnyAFMhLBtBEARBEARB\nEDRCWDaGiFwqRvBt+NChPfK3Xd5Q8Wn2t1LeZF2DiXYZn0kv9kWxRvzCpSodKNqKYY7ZyDHXXHNJ\nqnxy3c+x7k/rbbzxd/Pf9v1d4zLM1P04XUtJkSmPU+B+I2e+fz12xWWWvnWNZ91/3Pc/7rjjJHWm\nr8aft1/+ut0KU0lVmk/+DpLjjz++/Izvr1uWuL/MHX4dWIxcK+vxJ/0GGXOtH7KBvLkGlDiiXBG1\nXCpZxjLXm7P+Ot1ShveTL3/5ywP9/RcDpNzOxVp1ixXLeRnkfOnrsR2+P0WIZwd8/eP6iUfzmISn\nnnpKUjUGPdV5bqzX406HuahwDs7f46mAtdGt5/W1LidLOa+LnHWwvp+ntM0VXOSeuPfHVAjLRhAE\nQRAEQRAEjRAvG0EQBEEQBEEQNML08oGZTcEUiJnezfVUWCUQUJJ22GEHSZXLkwdEEhSIqwBmSikf\nuMs20u6528GSSy4pqQrsk6Tbb79dUvcUfsMC5lfvT1xeSGvqQbTdApy5Xg+gqgepeYq46RCsJlXX\n+rrXvU5SZ/X67bbbTlJV9VSq3NBwxcsFzNNHbirG7O1mYQJzqdbrQZkEPJ988snlNkzI/XJnGWSg\n6kTxIP7llltugGcyMboFN7o7QT11r7vj8Zlx6N/LpSCuB/O6+95YLlXB7A3JFXKBsnUZlKr5jLnC\nv+epv6GeAtzleNCJCHqJV2AH1kRfA7hm3LN9/LG/92kuTfp0oi4vPi+xXrp81V2Nc8l9cokIkD3v\na7bxjOfpstdcc01JnUlOWM/9GXIqhGUjCIIgCIIgCIJGCMvGEICG1wsJgacDhcMPP1xSZcUgQFIa\nWWzP0x+iRUCLLVXBWt3SlW688cbl5/PPP7+jbdBBk93IaYr22WcfSVVw1EUXXVS2YWHKaVvRHri2\nCq0URZ+4L9Lwp7wFrgerzJNPPlm2rbDCCpKkyy+/vP8n1ma33XYrP6PlmU4Wh6A7uXtZL34oVVYL\nLGpeGI65C02df4/PHkiKxjSXTnK6akyD3kAaa0+KgSYYrfsDDzxQtrHeopV2q5pbhAHNPGu2a56n\nS1KR8eDXTtFHUlP7cw7FKelb17bnApR5XmH9nm4B4ldeeaWkKvjdz/8b3/iGJGnrrbcutyGHzJMu\nX1hk6etc2mAPxidpEG255BnzzTdf+Tn3TDAVwrIRBEEQBEEQBEEjxMtGEARBEARBEASNkMYI8B3e\n6N/+MxnfjQn133XXXSdJOuCAA8pt5513nqR8sNkg+NGPfiRJWm211SRVprlxMNH+65ns5epl5Lj0\n0kslSbfeequkThc0ao14MD59MP/88/fqVEejMdk79NBDJUk33XSTJGnppZcu28jrn6ty2i923333\n8vNjjz0mqXLvcnPzGAxM9mYDBtZ3XneA6sq4DORqv+RcKpBXd9eiojXuj54kwpMUQD2f/QRofM2Y\nzem77BF0e+qpp5bbkAnk5pZbbinbcDE588wzJUlLLbVU2UbQ7QUXXFBuw4Vok002kSSdddZZZRuJ\nHQ488MCpXoY0YNlzdx+SypB8xF11qKvBX6/9QM0Td+1eeOGFJVXPHQ26cTcie0cddZSkKhB75syZ\nZdvmm28+wZ/sPSRIkKRLLrlEUvVM4Oc6Btm+C8tGEARBEARBEASNMJZlIwiCIAiCIAiCYFKEZSMI\ngiAIgiAIgkaIl40gCIIgCIIgCBohXjaCIAiCIAiCIGiEeNkIgiAIgiAIgqAR4mUjCIIgCIIgCIJG\niJeNIAiCIAiCIAga4f8D4gYGAlFku3AAAAAASUVORK5CYII=\n","text/plain":["<Figure size 1008x576 with 50 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"7cPtenZfgy9P","colab_type":"text"},"source":["This dataset has the same structure as the famous MNIST dataset (which you can load using `keras.datasets.mnist.load_data()`), except the images represent fashion items rather than handwritten digits, and it is much more challenging. A simple linear model can reach 92% accuracy on MNIST, but only 83% on fashion MNIST."]},{"cell_type":"markdown","metadata":{"id":"T9lhMUM-gy9T","colab_type":"text"},"source":["### Build a classification neural network with Keras"]},{"cell_type":"markdown","metadata":{"id":"JEyusGwugy9W","colab_type":"text"},"source":["### 2.1)\n","Build a `Sequential` model (`keras.models.Sequential`), without any argument, then and add four layers to it by calling its `add()` method:\n","  * a `Flatten` layer (`keras.layers.Flatten`) to convert each 28x28 image to a single row of 784 pixel values. Since it is the first layer in your model, you should specify the `input_shape` argument, leaving out the batch size: `[28, 28]`.\n","  * a `Dense` layer  (`keras.layers.Dense`) with 300 neurons (aka units), and the `\"relu\"` activation function.\n","  * Another `Dense` layer with 100 neurons, also with the `\"relu\"` activation function.\n","  * A final `Dense` layer with 10 neurons (one per class), and with the `\"softmax\"` activation function to ensure that the sum of all the estimated class probabilities for each image is equal to 1."]},{"cell_type":"code","metadata":{"id":"A_J5sB5sgy9l","colab_type":"code","colab":{}},"source":["model=keras.models.Sequential()\n","model.add(keras.layers.Flatten(input_shape=[28,28]))\n","model.add(keras.layers.Dense(300,activation='relu'))\n","model.add(keras.layers.Dense(100,activation='relu'))\n","model.add(keras.layers.Dense(10,activation='softmax'))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CqADaP_Jgy9q","colab_type":"text"},"source":["### 2.2)\n","Alternatively, you can pass a list containing the 4 layers to the constructor of the `Sequential` model. The model's `layers` attribute holds the list of layers."]},{"cell_type":"code","metadata":{"id":"1cqY5E1Qgy9u","colab_type":"code","colab":{}},"source":["model=keras.models.Sequential([keras.layers.Flatten(input_shape=[28,28]),keras.layers.Dense(300,activation='relu'),keras.layers.Dense(100,activation='relu'),keras.layers.Dense(10,activation='softmax')])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3bbe5xC9gy9y","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LziKftg9nKxo","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"m4axw0O7gy93","colab_type":"text"},"source":["### 2.3)\n","Call the model's `summary()` method and examine the output. Also, try using `keras.utils.plot_model()` to save an image of your model's architecture. Alternatively, you can uncomment the following code to display the image within Jupyter."]},{"cell_type":"markdown","metadata":{"id":"PnR3hpcLgy94","colab_type":"text"},"source":["**Warning**: you will need `pydot` and `graphviz` to use `plot_model()`."]},{"cell_type":"code","metadata":{"id":"6Nwjny9igy95","colab_type":"code","outputId":"5b4fcaff-f35c-43d0-ea72-ad2fa8152e96","executionInfo":{"status":"ok","timestamp":1579318082159,"user_tz":-540,"elapsed":1068,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":289}},"source":["model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","flatten_2 (Flatten)          (None, 784)               0         \n","_________________________________________________________________\n","dense_6 (Dense)              (None, 300)               235500    \n","_________________________________________________________________\n","dense_7 (Dense)              (None, 100)               30100     \n","_________________________________________________________________\n","dense_8 (Dense)              (None, 10)                1010      \n","=================================================================\n","Total params: 266,610\n","Trainable params: 266,610\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lNIJOr1sgy99","colab_type":"code","outputId":"e373ca99-b72f-46ce-ec3b-923892fcbe93","executionInfo":{"status":"ok","timestamp":1579318084098,"user_tz":-540,"elapsed":874,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":533}},"source":["keras.utils.plot_model(model,show_shapes=True)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"image/png":"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\nd96R325JFT/99BNC6JVXXkFaU003N7f33ntv8lXRJRUVFenp6QbYJ4unxusHA4qPONwobItOwXEz\nLS0tMjJyUtk6OTldv35dLBanpqaeOHHCyckJzwCbQlbYixcvLl269OTJkyl8l9atW7cQQhs3bkRa\nU00bGxv5TWD0VXp6uiFUU8GVK1c0XQS1MaD31ytWrDAyMrp9+zZt6qJFi1gs1mTn0rS0tDx69Agh\nZGVllZyc/Nprrz169GhqWVFOnjwZEhJiaWk5ta8rePHiRVpamo2NzZ49e5A2VRMA7WdA8dHKyiow\nMDA/Pz87O7u7u7umpubs2bNUKovFevvttz///POsrKzu7u6RkZHm5uZffvll/DxbWlr27dv3+PFj\nqVR6//7958+fu7m5TS0rrLW19fz587TPnsosREiSZG9vL97oXSwW5+bmenh4GBsbFxYW4v5HLakm\nALpBw++H1ETJd4U9PT179+6dN2/e7NmzPT09jxw5ghCysbGprq4mSXJwcDAqKsrW1pbBYOBgWltb\nm5mZiVcEWLJkSUNDw9mzZ3Ggefnll3/66afGxkZ3d3cLCwtjY+MFCxYcOnRoeHh4rKyUqciBAwdC\nQkJok4qLi83MzI4dOzY66dq1ay4uLhwOx8TExMjICP02hWbNmjWJiYm//vqr/Mkar6Y+vd8cB7y/\n1gMEqRcbfufl5QUFBelHXfTejh07kH71UtEy2HtSn35fA3q+BgCASYH4OEMeP348eu0yikYWPQVa\n5auvvoqOjpbJZNu2bbO1tWWxWAsXLvT396+pqVE+E5lMlpaW5u7uPjqpvLzcw8ODw+HweLyoqCiF\ngRxjpV67du3kyZO6stiw2kF8nCGvvPLKON0cly9f1nQBgSbFxcVlZGTExMTIZLJvv/320qVL7e3t\n5eXl/f39a9eubWlpUSaTurq6tWvXHjhwQCKRKCTV1tb6+vr6+PiIxeKrV6+eP38+PDxcmdStW7ey\nWCwfH5/Ozk51VVaXzEw353Qz2L5wXTQD/fcSiUQgEGg2K+XvyeTk5KVLl+KZnUNDQ5s3b6aSvv/+\ne4RQUlLShJlUVVUFBARcuHBh5cqVrq6uCqlBQUF8Ph8PbCBJMiUlhSCIH3/8UZlUkiSFQqFAIBga\nGlKmOvr0fgbaj0APZWdni0QibcuKVn19fWxsbEJCAp6/wGAwrl+/TqXa2dkhhBoaGibMx9XVtaCg\n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\nXQTtR6CNWCzWwYMHr169euHChe7u7gcPHoSHh/N4PLwmJkLIwcGhvb29sLBwaGhILBYr7BJuaWnZ\n0tLS2NjY09ODY59MJuvo6BgeHq6pqYmMjLS1tcXb3k42K2VW4ZwyDodjZ2fX3NyscLy+vt7a2joo\nKEj+YHBwsLW1Nd48Y7JiY2NbW1vj4uL6+voqKipSUlJCQ0MdHR3lz8HFcHZ2nkL+egPiI9BScXFx\nx48fT0xMfOmll7y9vRcvXlxaWmpqaopT9+/fv379+l27djk6Oh49ehQ/BgoEAjxqJzw8nMvlLl++\nfNOmTe3t7QihgYEBZ2dnNpvt5eW1dOnSb775hurmm2xW08rPz6+2tlbhVTLtIESpVCoSieQHdcu7\nc+eOp6fnggULKisrq6ureTyeh4dHWVkZTnVycvriiy++/PLLefPmBQYG7tmz5/Tp0wo53L17d+HC\nhQoP3QZnWleXnDEGuxapLpr59VPDwsIsLS1n8orkVO/Juro6BoPx2WefTXjmyMiIl5eX/H5zatTW\n1sZisU6dOjWF7+rT+rjQfgQGQVcWpHFwcEhMTExMTOzt7R3ntJGRkcLCwp6enmlaGS8+Pn7lypVC\noXA6MtchEB8B0C7R0dE7duwIDg6mfVGDlZaWFhQUlJSUjDXTRhWpqalVVVXFxcUqDrTUAxAfgZ6L\niYnJycnp6uri8/n5+fmaLo5SkpKShEJhcnLyWCf4+PhcvHiRmjauRkVFRYODg6WlpRYWFmrPXOfA\n+B6g544fP378+HFNl2LSfH19fX19Z/66/v7+/v7+M39d7QTtRwAAoAfxEQAA6EF8BAAAehAfAQCA\nnl69n8EbkwMtd+fOHWQAPxaen6f31Rztzp071Nx2XUeQerF+ekVFRWpqqqZLAQBACCGBQHDgwAFN\nl0IN9CQ+AgCA2kH/IwAA0IP4CAAA9CA+AgAAPYiPAABA7/8AQBVke+0y6wMAAAAASUVORK5CYII=\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"DXSt-qcAgy-A","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SDdn68CRgy-F","colab_type":"text"},"source":["### 2.4)\n","After a model is created, you must call its `compile()` method to specify the `loss` function and the `optimizer` to use. In this case, you want to use the `\"sparse_categorical_crossentropy\"` loss, and the `keras.optimizers.SGD(lr=1e-3)` optimizer (stochastic gradient descent with a learning rate of 1e-3). Moreover, you can optionally specify a list of additional metrics that should be measured during training. In this case you should specify `metrics=[\"accuracy\"]`. **Note**: you can find more loss functions in `keras.losses`, more metrics in `keras.metrics` and more optimizers in `keras.optimizers`."]},{"cell_type":"code","metadata":{"id":"MI29zbtXgy-H","colab_type":"code","colab":{}},"source":["model.compile(loss='sparse_categorical_crossentropy',optimizer=keras.optimizers.SGD(lr=1e-3),metrics=[\"accuracy\"])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"34i4EM__gy-M","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"z6FIxXCWgy-R","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AwmY3dZ9gy-Y","colab_type":"text"},"source":["### 2.5)\n","Now your model is ready to be trained. Call its `fit()` method, passing it the input features (`X_train`) and the target classes (`y_train`). Set `epochs=10` (or else it will just run for a single epoch). You can also (optionally) pass the validation data by setting `validation_data=(X_valid, y_valid)`. If you do, Keras will compute the loss and the additional metrics (the accuracy in this case) on the validation set at the end of each epoch. If the performance on the training set is much better than on the validation set, your model is probably overfitting the training set (or there is a bug, such as a mismatch between the training set and the validation set).\n","**Note**: the `fit()` method will return a `History` object containing training stats. Make sure to preserve it (`history = model.fit(...)`)."]},{"cell_type":"code","metadata":{"id":"0IZU2GApgy-Z","colab_type":"code","outputId":"6b5a9b0e-0554-4c47-f74f-b6d1b015dd6e","executionInfo":{"status":"ok","timestamp":1579318149190,"user_tz":-540,"elapsed":60773,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":374}},"source":["history=model.fit(X_train,y_train,epochs=10,validation_data=(X_valid,y_valid))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 55000 samples, validate on 5000 samples\n","Epoch 1/10\n","55000/55000 [==============================] - 6s 117us/sample - loss: 2.0455 - accuracy: 0.7051 - val_loss: 0.6680 - val_accuracy: 0.7466\n","Epoch 2/10\n","55000/55000 [==============================] - 6s 108us/sample - loss: 0.5957 - accuracy: 0.7749 - val_loss: 0.5650 - val_accuracy: 0.7994\n","Epoch 3/10\n","55000/55000 [==============================] - 6s 106us/sample - loss: 0.5232 - accuracy: 0.8014 - val_loss: 0.5273 - val_accuracy: 0.8162\n","Epoch 4/10\n","55000/55000 [==============================] - 6s 106us/sample - loss: 0.4798 - accuracy: 0.8215 - val_loss: 0.5036 - val_accuracy: 0.8238\n","Epoch 5/10\n","55000/55000 [==============================] - 6s 110us/sample - loss: 0.4452 - accuracy: 0.8364 - val_loss: 0.5151 - val_accuracy: 0.8160\n","Epoch 6/10\n","55000/55000 [==============================] - 6s 110us/sample - loss: 0.4196 - accuracy: 0.8447 - val_loss: 0.4915 - val_accuracy: 0.8340\n","Epoch 7/10\n","55000/55000 [==============================] - 6s 109us/sample - loss: 0.3988 - accuracy: 0.8524 - val_loss: 0.4558 - val_accuracy: 0.8474\n","Epoch 8/10\n","55000/55000 [==============================] - 6s 108us/sample - loss: 0.3799 - accuracy: 0.8587 - val_loss: 0.4430 - val_accuracy: 0.8504\n","Epoch 9/10\n","55000/55000 [==============================] - 6s 109us/sample - loss: 0.3677 - accuracy: 0.8633 - val_loss: 0.4381 - val_accuracy: 0.8500\n","Epoch 10/10\n","55000/55000 [==============================] - 6s 110us/sample - loss: 0.3539 - accuracy: 0.8681 - val_loss: 0.4333 - val_accuracy: 0.8566\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mfJc1Pckgy-f","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nB6L28rQgy-i","colab_type":"text"},"source":["### 2.6)\n","Try running `pd.DataFrame(history.history).plot()` to plot the learning curves. To make the graph more readable, you can also set `figsize=(8, 5)`, call `plt.grid(True)` and `plt.gca().set_ylim(0, 1)`."]},{"cell_type":"code","metadata":{"id":"2cvvs32ugy-k","colab_type":"code","outputId":"6d6c2e46-e78e-4d01-c430-1e579c6a0c9a","executionInfo":{"status":"ok","timestamp":1579318331066,"user_tz":-540,"elapsed":1405,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":341}},"source":["pd.DataFrame(history.history).plot(figsize=(8,5))\n","plt.grid(True)\n","plt.gca().set_ylim(0,1)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0, 1)"]},"metadata":{"tags":[]},"execution_count":38},{"output_type":"display_data","data":{"image/png":"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\nSUVORK5CYII=\n","text/plain":["<Figure size 576x360 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"NE4DNJKngy-z","colab_type":"text"},"source":["### 2.7)\n","Try running `model.fit()` again, and notice that training continues where it left off."]},{"cell_type":"code","metadata":{"id":"7dZJouw9gy-0","colab_type":"code","outputId":"f1796e27-9391-4feb-f7b2-0ffa716851bb","executionInfo":{"status":"ok","timestamp":1579318549257,"user_tz":-540,"elapsed":30945,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["early_stopping=keras.callbacks.EarlyStopping(monitor='val_loss',min_delta=0,patience=3)\n","history=model.fit(X_train,y_train,epochs=10,validation_data=(X_valid,y_valid),callbacks=[early_stopping])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 55000 samples, validate on 5000 samples\n","Epoch 1/10\n","55000/55000 [==============================] - 6s 106us/sample - loss: 0.2850 - accuracy: 0.8924 - val_loss: 0.4178 - val_accuracy: 0.8634\n","Epoch 2/10\n","55000/55000 [==============================] - 6s 106us/sample - loss: 0.2801 - accuracy: 0.8952 - val_loss: 0.4166 - val_accuracy: 0.8642\n","Epoch 3/10\n","55000/55000 [==============================] - 6s 109us/sample - loss: 0.2770 - accuracy: 0.8966 - val_loss: 0.4204 - val_accuracy: 0.8624\n","Epoch 4/10\n","55000/55000 [==============================] - 6s 111us/sample - loss: 0.2722 - accuracy: 0.8973 - val_loss: 0.4215 - val_accuracy: 0.8624\n","Epoch 5/10\n","55000/55000 [==============================] - 6s 112us/sample - loss: 0.2694 - accuracy: 0.8995 - val_loss: 0.4226 - val_accuracy: 0.8642\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yJEfU207gy-5","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hILfMq4Sgy-8","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"S1hqID7Ugy-_","colab_type":"text"},"source":["### 2.8)\n","call the model's `evaluate()` method, passing it the test set (`X_test` and `y_test`). This will compute the loss (cross-entropy) on the test set, as well as all the additional metrics (in this case, the accuracy). Your model should achieve over 80% accuracy on the test set."]},{"cell_type":"code","metadata":{"id":"_K_6iP3Bgy_A","colab_type":"code","outputId":"78339d44-e3b5-4b15-b3fa-f5a47ff895d9","executionInfo":{"status":"ok","timestamp":1579318576096,"user_tz":-540,"elapsed":1640,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["model.evaluate(X_test,y_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["10000/10000 [==============================] - 1s 55us/sample - loss: 0.4483 - accuracy: 0.8511\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.44829586668014526, 0.8511]"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"Q2sZav4Igy_D","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TYuqryjzgy_J","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MIZ3Lsbtgy_U","colab_type":"text"},"source":["### 2.9)\n","Define `X_new` as the first 10 instances of the test set. Call the model's `predict()` method to estimate the probability of each class for each instance (for better readability, you may use the output array's `round()` method):"]},{"cell_type":"code","metadata":{"id":"CmAkjLURgy_W","colab_type":"code","outputId":"31d035be-df1f-49f2-98dd-d5487b6b0acb","executionInfo":{"status":"ok","timestamp":1579319124016,"user_tz":-540,"elapsed":1130,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X_new=X_test[40:50]\n","X_new.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10, 28, 28)"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"XLggraTSgy_b","colab_type":"code","outputId":"5ea08078-85e5-4663-b7ca-ac679b6fb0b8","executionInfo":{"status":"ok","timestamp":1579319125164,"user_tz":-540,"elapsed":527,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["y_new=model.predict(X_new)\n","y_new.round(2)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.92, 0.  , 0.  , 0.  , 0.  , 0.  , 0.08, 0.  , 0.  , 0.  ],\n","       [0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ],\n","       [0.54, 0.  , 0.01, 0.06, 0.  , 0.  , 0.38, 0.  , 0.  , 0.  ],\n","       [0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.95, 0.  , 0.05],\n","       [0.  , 0.  , 0.11, 0.  , 0.08, 0.  , 0.8 , 0.  , 0.  , 0.  ],\n","       [0.  , 0.  , 0.  , 0.  , 0.  , 0.11, 0.  , 0.78, 0.  , 0.1 ],\n","       [0.1 , 0.  , 0.79, 0.01, 0.01, 0.  , 0.09, 0.  , 0.  , 0.  ],\n","       [0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ],\n","       [0.  , 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ],\n","       [0.03, 0.  , 0.37, 0.01, 0.08, 0.  , 0.5 , 0.  , 0.01, 0.  ]],\n","      dtype=float32)"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"o0XsyOptgy_e","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WdWO0ashgy_k","colab_type":"text"},"source":["### 2.10)\n","Often, you may only be interested in the most likely class. Use `np.argmax()` to get the class ID of the most likely class for each instance. **Tip**: you want to set `axis=1`."]},{"cell_type":"code","metadata":{"id":"o-ubviT_gy_m","colab_type":"code","outputId":"f1e5fff1-0c9a-4581-853d-ce4c3b04dd16","executionInfo":{"status":"ok","timestamp":1579320324674,"user_tz":-540,"elapsed":1161,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["res=np.zeros(10)\n","res"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]},"metadata":{"tags":[]},"execution_count":71}]},{"cell_type":"code","metadata":{"id":"DX4_Wz4ogy_r","colab_type":"code","colab":{}},"source":["for i in range(10):\n","  res[i]=np.argmax(y_new[i])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WCheIqwwgy_v","colab_type":"code","outputId":"f159f4fb-5f80-4bb1-ada7-c1754536112e","executionInfo":{"status":"ok","timestamp":1579320422424,"user_tz":-540,"elapsed":853,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["res"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0., 1., 0., 7., 6., 7., 2., 1., 2., 6.])"]},"metadata":{"tags":[]},"execution_count":76}]},{"cell_type":"markdown","metadata":{"id":"QFgBd20Ngy_z","colab_type":"text"},"source":["### 2.11)\n","Call the model's `predict_classes()` method for `X_new`. You should get the same result as above."]},{"cell_type":"code","metadata":{"id":"j1wlcNQJgy_1","colab_type":"code","outputId":"14a70294-9575-4fde-ed6f-2226501c6421","executionInfo":{"status":"ok","timestamp":1579320463888,"user_tz":-540,"elapsed":1172,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["model.predict_classes(X_new)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 0, 7, 6, 7, 2, 1, 2, 6])"]},"metadata":{"tags":[]},"execution_count":77}]},{"cell_type":"code","metadata":{"id":"CeK_d5Gkgy_4","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aFTV_QkYgy_7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bOK9ZmTvgy_-","colab_type":"text"},"source":["### 2.12)\n","(Optional) It is often useful to know how confident the model is for each prediction. Try finding the estimated probability for each predicted class using `np.max()`."]},{"cell_type":"code","metadata":{"id":"bZN_jAeAgy__","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DyzdHUZBgzAC","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5YBKX2k9gzAF","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vrbSAGc1gzAI","colab_type":"text"},"source":["### 2.13)\n","(Optional) It is frequent to want the top k classes and their estimated probabilities rather just the most likely class. You can use `np.argsort()` for this."]},{"cell_type":"code","metadata":{"id":"qm64kFiHgzAI","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rMBDZ47pgzAK","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1Yy0sLWWgzAM","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Q87XAdzSgzAO","colab_type":"text"},"source":["![Exercise solution](https://camo.githubusercontent.com/250388fde3fac9135ead9471733ee28e049f7a37/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30362f46696c6f735f736567756e646f5f6c6f676f5f253238666c69707065642532392e6a7067)"]},{"cell_type":"markdown","metadata":{"id":"XT1D7TvQgzAP","colab_type":"text"},"source":["## Exercise 2 - Solution"]},{"cell_type":"markdown","metadata":{"id":"tFQTvG2MgzAT","colab_type":"text"},"source":["### 2.1)\n","Build a `Sequential` model (`keras.models.Sequential`), without any argument, then and add four layers to it by calling its `add()` method:\n","  * a `Flatten` layer (`keras.layers.Flatten`) to convert each 28x28 image to a single row of 784 pixel values. Since it is the first layer in your model, you should specify the `input_shape` argument, leaving out the batch size: `[28, 28]`.\n","  * a `Dense` layer  (`keras.layers.Dense`) with 300 neurons (aka units), and the `\"relu\"` activation function.\n","  * Another `Dense` layer with 100 neurons, also with the `\"relu\"` activation function.\n","  * A final `Dense` layer with 10 neurons (one per class), and with the `\"softmax\"` activation function to ensure that the sum of all the estimated class probabilities for each image is equal to 1."]},{"cell_type":"code","metadata":{"id":"Gmr5au1hgzAU","colab_type":"code","colab":{}},"source":["model = keras.models.Sequential()\n","model.add(keras.layers.Flatten(input_shape=[28, 28]))\n","model.add(keras.layers.Dense(300, activation=\"relu\"))\n","model.add(keras.layers.Dense(100, activation=\"relu\"))\n","model.add(keras.layers.Dense(10, activation=\"softmax\"))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"322XyVTJgzAX","colab_type":"text"},"source":["### 2.2)\n","Alternatively, you can pass a list containing the 4 layers to the constructor of the `Sequential` model. The model's `layers` attribute holds the list of layers."]},{"cell_type":"code","metadata":{"id":"BtAz6S5OgzAY","colab_type":"code","colab":{}},"source":["model = keras.models.Sequential([\n","    keras.layers.Flatten(input_shape=[28, 28]),\n","    keras.layers.Dense(300, activation=\"relu\"),\n","    keras.layers.Dense(100, activation=\"relu\"),\n","    keras.layers.Dense(10, activation=\"softmax\")\n","])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Viq92ZuTgzAe","colab_type":"code","colab":{}},"source":["model.layers"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rzNW20EFgzAh","colab_type":"text"},"source":["### 2.3)\n","Call the model's `summary()` method and examine the output. Also, try using `keras.utils.plot_model()` to save an image of your model's architecture. Alternatively, you can uncomment the following code to display the image within Jupyter."]},{"cell_type":"code","metadata":{"id":"6KDmWJ85gzAj","colab_type":"code","colab":{}},"source":["model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XrHRfj6JgzAm","colab_type":"code","colab":{}},"source":["keras.utils.plot_model(model, \"my_mnist_model.png\", show_shapes=True)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"P2Azl2ZkgzAq","colab_type":"text"},"source":["**Warning**: at the present, you need `from tensorflow.python.keras.utils.vis_utils import model_to_dot`, instead of simply `keras.utils.model_to_dot`. See [TensorFlow issue 24639](https://github.com/tensorflow/tensorflow/issues/24639)."]},{"cell_type":"code","metadata":{"id":"1VyzDxldgzAr","colab_type":"code","colab":{}},"source":["from IPython.display import SVG\n","from tensorflow.python.keras.utils.vis_utils import model_to_dot\n","SVG(model_to_dot(model, show_shapes=True).create(prog='dot', format='svg'))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hwx_skBLgzAy","colab_type":"text"},"source":["### 2.4)\n","After a model is created, you must call its `compile()` method to specify the `loss` function and the `optimizer` to use. In this case, you want to use the `\"sparse_categorical_crossentropy\"` loss, and the `keras.optimizers.SGD(lr=1e-3)` optimizer (stochastic gradient descent with learning rate of 1e-3). Moreover, you can optionally specify a list of additional metrics that should be measured during training. In this case you should specify `metrics=[\"accuracy\"]`. **Note**: you can find more loss functions in `keras.losses`, more metrics in `keras.metrics` and more optimizers in `keras.optimizers`."]},{"cell_type":"code","metadata":{"id":"YlR8mymmgzA0","colab_type":"code","colab":{}},"source":["model.compile(loss=\"sparse_categorical_crossentropy\",\n","              optimizer=keras.optimizers.SGD(lr=1e-3),\n","              metrics=[\"accuracy\"])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"D3Hm7uL4gzA2","colab_type":"text"},"source":["### 2.5)\n","Now your model is ready to be trained. Call its `fit()` method, passing it the input features (`X_train`) and the target classes (`y_train`). Set `epochs=10` (or else it will just run for a single epoch). You can also (optionally) pass the validation data by setting `validation_data=(X_valid, y_valid)`. If you do, Keras will compute the loss and the additional metrics (the accuracy in this case) on the validation set at the end of each epoch. If the performance on the training set is much better than on the validation set, your model is probably overfitting the training set (or there is a bug, such as a mismatch between the training set and the validation set).\n","**Note**: the `fit()` method will return a `History` object containing training stats. Make sure to preserve it (`history = model.fit(...)`)."]},{"cell_type":"code","metadata":{"id":"31P9NMTsgzA3","colab_type":"code","colab":{}},"source":["history = model.fit(X_train, y_train, epochs=10,\n","                    validation_data=(X_valid, y_valid))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NqUz-wxNgzA5","colab_type":"text"},"source":["### 2.6)\n","Try running `pd.DataFrame(history.history).plot()` to plot the learning curves. To make the graph more readable, you can also set `figsize=(8, 5)`, call `plt.grid(True)` and `plt.gca().set_ylim(0, 1)`."]},{"cell_type":"code","metadata":{"id":"IcE_5Y_8gzA6","colab_type":"code","colab":{}},"source":["def plot_learning_curves(history):\n","    pd.DataFrame(history.history).plot(figsize=(8, 5))\n","    plt.grid(True)\n","    plt.gca().set_ylim(0, 1)\n","    plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"O_aF7MLSgzA7","colab_type":"code","colab":{}},"source":["plot_learning_curves(history)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oVhy1mmtgzA_","colab_type":"text"},"source":["### 2.7)\n","Try running `model.fit()` again, and notice that training continues where it left off."]},{"cell_type":"code","metadata":{"id":"4AeRrchAgzA_","colab_type":"code","colab":{}},"source":["history = model.fit(X_train, y_train, epochs=10,\n","                    validation_data=(X_valid, y_valid))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cj81X94PgzBB","colab_type":"text"},"source":["### 2.8)\n","Call the model's `evaluate()` method, passing it the test set (`X_test` and `y_test`). This will compute the loss (cross-entropy) on the test set, as well as all the additional metrics (in this case, the accuracy). Your model should achieve over 80% accuracy on the test set."]},{"cell_type":"code","metadata":{"id":"QqAJOcBkgzBC","colab_type":"code","colab":{}},"source":["model.evaluate(X_test, y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"woyLR9hsgzBE","colab_type":"text"},"source":["### 2.9)\n","Define `X_new` as the first 10 instances of the test set. Call the model's `predict()` method to estimate the probability of each class for each instance (for better readability, you may use the output array's `round()` method):"]},{"cell_type":"code","metadata":{"id":"TefSJyubgzBF","colab_type":"code","colab":{}},"source":["n_new = 10\n","X_new = X_test[:n_new]\n","y_proba = model.predict(X_new)\n","y_proba.round(2)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2UnEPOyogzBH","colab_type":"text"},"source":["### 2.10)\n","Often, you may only be interested in the most likely class. Use `np.argmax()` to get the class ID of the most likely class for each instance. **Tip**: you want to set `axis=1`."]},{"cell_type":"code","metadata":{"id":"PLINBlmdgzBI","colab_type":"code","colab":{}},"source":["y_pred = y_proba.argmax(axis=1)\n","y_pred"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vW3ucfVAgzBJ","colab_type":"text"},"source":["### 2.11)\n","Call the model's `predict_classes()` method for `X_new`. You should get the same result as above."]},{"cell_type":"code","metadata":{"id":"E1su6XrZgzBK","colab_type":"code","colab":{}},"source":["y_pred = model.predict_classes(X_new)\n","y_pred"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4XVyNyOCgzBM","colab_type":"text"},"source":["### 2.12)\n","(Optional) It is often useful to know how confident the model is for each prediction. Try finding the estimated probability for each predicted class using `np.max()`."]},{"cell_type":"code","metadata":{"id":"3zuk4LsGgzBM","colab_type":"code","colab":{}},"source":["y_proba.max(axis=1).round(2)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GIxKKaPIgzBO","colab_type":"text"},"source":["### 2.13)\n","(Optional) It is frequent to want the top k classes and their estimated probabilities rather just the most likely class. You can use `np.argsort()` for this."]},{"cell_type":"code","metadata":{"id":"XCbwWYpagzBP","colab_type":"code","colab":{}},"source":["k = 3\n","top_k = np.argsort(-y_proba, axis=1)[:, :k]\n","top_k"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-Iuo4zs0gzBT","colab_type":"code","colab":{}},"source":["row_indices = np.tile(np.arange(len(top_k)), [k, 1]).T\n","y_proba[row_indices, top_k].round(2)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C3IgJy6ugzBV","colab_type":"text"},"source":["![Exercise](https://c1.staticflickr.com/9/8101/8553474140_c50cf08708_b.jpg)"]},{"cell_type":"markdown","metadata":{"id":"SkjBZKrOgzBW","colab_type":"text"},"source":["## Exercise 3 – Scale the features"]},{"cell_type":"markdown","metadata":{"id":"ISxV9JYigzBX","colab_type":"text"},"source":["### 3.1)\n","When using Gradient Descent, it is usually best to ensure that the features all have a similar scale, preferably with a Normal distribution. Try to standardize the pixel values and see if this improves the performance of your neural network.\n","\n","**Tips**:\n","* For each feature (pixel intensity), you must subtract the `mean()` of that feature (across all instances, so use `axis=0`) and divide by its standard deviation (`std()`, again `axis=0`). Alternatively, you can use Scikit-Learn's `StandardScaler`.\n","* Make sure you compute the means and standard deviations on the training set, and use these statistics to scale the training set, the validation set and the test set (you should not fit the validation set or the test set, and computing the means and standard deviations counts as \"fitting\")."]},{"cell_type":"code","metadata":{"id":"aGoSUzDFgzBY","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EyXhn-mygzBa","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7f8yvOPngzBc","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wNpkiAgQgzBd","colab_type":"text"},"source":["### 3.2)\n","Plot the learning curves. Do they look better than earlier?"]},{"cell_type":"code","metadata":{"id":"uaszGvXlgzBe","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p1WPaOH7gzBh","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BQ8dRnuxgzBk","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iKr4iL_hgzBo","colab_type":"text"},"source":["![Exercise solution](https://camo.githubusercontent.com/250388fde3fac9135ead9471733ee28e049f7a37/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30362f46696c6f735f736567756e646f5f6c6f676f5f253238666c69707065642532392e6a7067)"]},{"cell_type":"markdown","metadata":{"id":"XJde-FlCgzBo","colab_type":"text"},"source":["## Exercise 3 – Solution"]},{"cell_type":"markdown","metadata":{"id":"8uwdDJ2SgzBp","colab_type":"text"},"source":["### 3.1)\n","When using Gradient Descent, it is usually best to ensure that the features all have a similar scale, preferably with a Normal distribution. Try to standardize the pixel values and see if this improves the performance of your neural network."]},{"cell_type":"code","metadata":{"id":"XD0lemIUgzBq","colab_type":"code","colab":{}},"source":["pixel_means = X_train.mean(axis = 0)\n","pixel_stds = X_train.std(axis = 0)\n","X_train_scaled = (X_train - pixel_means) / pixel_stds\n","X_valid_scaled = (X_valid - pixel_means) / pixel_stds\n","X_test_scaled = (X_test - pixel_means) / pixel_stds"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"s7T73ouCgzBs","colab_type":"code","colab":{}},"source":["from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train.astype(np.float32).reshape(-1, 28 * 28)).reshape(-1, 28, 28)\n","X_valid_scaled = scaler.transform(X_valid.astype(np.float32).reshape(-1, 28 * 28)).reshape(-1, 28, 28)\n","X_test_scaled = scaler.transform(X_test.astype(np.float32).reshape(-1, 28 * 28)).reshape(-1, 28, 28)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3qbiI8qngzBx","colab_type":"code","colab":{}},"source":["model = keras.models.Sequential([\n","    keras.layers.Flatten(input_shape=[28, 28]),\n","    keras.layers.Dense(300, activation=\"relu\"),\n","    keras.layers.Dense(100, activation=\"relu\"),\n","    keras.layers.Dense(10, activation=\"softmax\")\n","])\n","model.compile(loss=\"sparse_categorical_crossentropy\",\n","              optimizer=keras.optimizers.SGD(1e-3), metrics=[\"accuracy\"])\n","history = model.fit(X_train_scaled, y_train, epochs=20,\n","                    validation_data=(X_valid_scaled, y_valid))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BxUQpDE0gzBz","colab_type":"code","colab":{}},"source":["model.evaluate(X_test_scaled, y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UtQvmyKlgzB1","colab_type":"text"},"source":["### 3.2)\n","Plot the learning curves. Do they look better than earlier?"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"vQvTiN_pgzB2","colab_type":"code","colab":{}},"source":["plot_learning_curves(history)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bv_QErRZgzB4","colab_type":"text"},"source":["![Exercise](https://c1.staticflickr.com/9/8101/8553474140_c50cf08708_b.jpg)"]},{"cell_type":"markdown","metadata":{"id":"MFL2woiegzB5","colab_type":"text"},"source":["## Exercise 4 – Use Callbacks"]},{"cell_type":"markdown","metadata":{"id":"UgWKhFaMgzB5","colab_type":"text"},"source":["### 4.1)\n","The `fit()` method accepts a `callbacks` argument. Try training your model with a large number of epochs, a validation set, and with a few callbacks from `keras.callbacks`:\n","* `TensorBoard`: specify a log directory. It should be a subdirectory of a root logdir, such as `./my_logs/run_1`, and it should be different every time you train your model. You can use a timestamp in the subdirectory's path to ensure that it changes at every run.\n","* `EarlyStopping`: specify `patience=5`\n","* `ModelCheckpoint`: specify the path of the checkpoint file to save (e.g., `\"my_mnist_model.h5\"`) and set `save_best_only=True`\n","\n","Notice that the `EarlyStopping` callback will interrupt training before it reaches the requested number of epochs. This reduces the risk of overfitting."]},{"cell_type":"code","metadata":{"id":"fKLS8svGgzB6","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pdfNquzugzB7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"U7TVVgSkgzB9","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lTiG8sVNgzB-","colab_type":"code","colab":{}},"source":["root_logdir = os.path.join(os.curdir, \"my_logs\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1ifIgjGdgzCB","colab_type":"text"},"source":["### 4.2)\n","The Jupyter plugin for tensorboard was loaded at the beginning of this notebook (`%load_ext tensorboard`), so you can now simply start it by using the `%tensorboard` magic command. Explore the various tabs available, in particular the SCALARS tab to view learning curves, the GRAPHS tab to view the computation graph, and the PROFILE tab which is very useful to identify bottlenecks if you run into performance issues."]},{"cell_type":"code","metadata":{"id":"5oerWc2VgzCB","colab_type":"code","colab":{}},"source":["%tensorboard --logdir=./my_logs"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4O_Sq36IgzCD","colab_type":"text"},"source":["### 4.3)\n","The early stopping callback only stopped training after 10 epochs without progress, so your model may already have started to overfit the training set. Fortunately, since the `ModelCheckpoint` callback only saved the best models (on the validation set), the last saved model is the best on the validation set, so try loading it using `keras.models.load_model()`. Finally evaluate it on the test set."]},{"cell_type":"code","metadata":{"id":"4FdFFP_bgzCD","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JTTa2qUOgzCG","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IsvvPI_9gzCI","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ITeFoijxgzCK","colab_type":"text"},"source":["### 4.4)\n","Look at the list of available callbacks at https://keras.io/callbacks/"]},{"cell_type":"code","metadata":{"id":"eOxelUQ2gzCK","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"d0Vi8yQagzCM","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gbhuyds5gzCO","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jYZvwOgxgzCQ","colab_type":"text"},"source":["![Exercise solution](https://camo.githubusercontent.com/250388fde3fac9135ead9471733ee28e049f7a37/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30362f46696c6f735f736567756e646f5f6c6f676f5f253238666c69707065642532392e6a7067)"]},{"cell_type":"markdown","metadata":{"id":"PsK0H2MRgzCR","colab_type":"text"},"source":["## Exercise 4 – Solution"]},{"cell_type":"markdown","metadata":{"id":"sgt3MskYgzCS","colab_type":"text"},"source":["### 4.1)\n","The `fit()` method accepts a `callbacks` argument. Try training your model with a large number of epochs, a validation set, and with a few callbacks from `keras.callbacks`:\n","* `TensorBoard`: specify a log directory. It should be a subdirectory of a root logdir, such as `./my_logs/run_1`, and it should be different every time you train your model. You can use a timestamp in the subdirectory's path to ensure that it changes at every run.\n","* `EarlyStopping`: specify `patience=5`\n","* `ModelCheckpoint`: specify the path of the checkpoint file to save (e.g., `\"my_mnist_model.h5\"`) and set `save_best_only=True`\n","\n","Notice that the `EarlyStopping` callback will interrupt training before it reaches the requested number of epochs. This reduces the risk of overfitting."]},{"cell_type":"code","metadata":{"id":"NsPFLFLHgzCS","colab_type":"code","colab":{}},"source":["model = keras.models.Sequential([\n","    keras.layers.Flatten(input_shape=[28, 28]),\n","    keras.layers.Dense(300, activation=\"relu\"),\n","    keras.layers.Dense(100, activation=\"relu\"),\n","    keras.layers.Dense(10, activation=\"softmax\")\n","])\n","model.compile(loss=\"sparse_categorical_crossentropy\",\n","              optimizer=keras.optimizers.SGD(1e-3), metrics=[\"accuracy\"])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SLHhX_GbgzCV","colab_type":"code","colab":{}},"source":["logdir = os.path.join(root_logdir, \"run_{}\".format(time.time()))\n","\n","callbacks = [\n","    keras.callbacks.TensorBoard(logdir),\n","    keras.callbacks.EarlyStopping(patience=5),\n","    keras.callbacks.ModelCheckpoint(\"my_mnist_model.h5\", save_best_only=True),\n","]\n","history = model.fit(X_train_scaled, y_train, epochs=50,\n","                    validation_data=(X_valid_scaled, y_valid),\n","                    callbacks=callbacks)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"m7r0pAifgzCZ","colab_type":"text"},"source":["### 4.2)\n","Done"]},{"cell_type":"markdown","metadata":{"id":"eX_73u0pgzCa","colab_type":"text"},"source":["### 4.3)\n","The early stopping callback only stopped training after 10 epochs without progress, so your model may already have started to overfit the training set. Fortunately, since the `ModelCheckpoint` callback only saved the best models (on the validation set), the last saved model is the best on the validation set, so try loading it using `keras.models.load_model()`. Finally evaluate it on the test set."]},{"cell_type":"code","metadata":{"id":"Y2nyLQPIgzCc","colab_type":"code","colab":{}},"source":["model = keras.models.load_model(\"my_mnist_model.h5\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3a81AszSgzCe","colab_type":"code","colab":{}},"source":["model.evaluate(X_valid_scaled, y_valid)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vR14xotLgzCg","colab_type":"text"},"source":["### 4.4)\n","Look at the list of available callbacks at https://keras.io/callbacks/"]},{"cell_type":"markdown","metadata":{"id":"I7i7iq77gzCh","colab_type":"text"},"source":["![Exercise](https://c1.staticflickr.com/9/8101/8553474140_c50cf08708_b.jpg)"]},{"cell_type":"markdown","metadata":{"id":"4AhPMs_AgzCi","colab_type":"text"},"source":["## Exercise 5 – A neural net for regression"]},{"cell_type":"markdown","metadata":{"id":"rNLYhpUcgzCi","colab_type":"text"},"source":["### 5.1)\n","Load the California housing dataset using `sklearn.datasets.fetch_california_housing`. This returns an object with a `DESCR` attribute describing the dataset, a `data` attribute with the input features, and a `target` attribute with the labels. The goal is to predict the price of houses in a district (a census block) given some stats about that district. This is a regression task (predicting values)."]},{"cell_type":"code","metadata":{"id":"1WkD_s1UgzCj","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"85HG3crfgzCk","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4GG5Qm6lgzCo","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F9BNDXe7gzCp","colab_type":"text"},"source":["### 5.2)\n","Split the dataset into a training set, a validation set and a test set using Scikit-Learn's `sklearn.model_selection.train_test_split()` function."]},{"cell_type":"code","metadata":{"id":"hPQeYGpSgzCq","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4R8M1I2FgzCr","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"a9JLmRllgzCu","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t_AhW2kAgzCw","colab_type":"text"},"source":["### 5.3)\n","Scale the input features (e.g., using a `sklearn.preprocessing.StandardScaler`). Once again, don't forget that you should not fit the validation set or the test set, only the training set."]},{"cell_type":"code","metadata":{"id":"VrRO_dZ-gzCx","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"96aC6kucgzCz","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XAdT4Jy5gzC1","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZNk3xOqlgzC5","colab_type":"text"},"source":["### 5.4)\n","Now build, train and evaluate a neural network to tackle this problem. Then use it to make predictions on the test set.\n","\n","**Tips**:\n","* Since you are predicting a single value per district (the median house price), there should only be one neuron in the output layer.\n","* Usually for regression tasks you don't want to use any activation function in the output layer (in some cases you may want to use `\"relu\"` or `\"softplus\"` if you want to constrain the predicted values to be positive, or `\"sigmoid\"` or `\"tanh\"` if you want to constrain the predicted values to 0-1 or -1-1).\n","* A good loss function for regression is generally the `\"mean_squared_error\"` (aka `\"mse\"`). When there are many outliers in your dataset, you may prefer to use the `\"mean_absolute_error\"` (aka `\"mae\"`), which is a bit less precise but less sensitive to outliers."]},{"cell_type":"code","metadata":{"id":"4bs9LpG5gzC8","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hQiSWGTggzC-","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fxpsz6t4gzDC","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"la2LuHXugzDE","colab_type":"text"},"source":["![Exercise solution](https://camo.githubusercontent.com/250388fde3fac9135ead9471733ee28e049f7a37/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30362f46696c6f735f736567756e646f5f6c6f676f5f253238666c69707065642532392e6a7067)"]},{"cell_type":"markdown","metadata":{"id":"uUOTnEykgzDH","colab_type":"text"},"source":["## Exercise 5 – Solution"]},{"cell_type":"markdown","metadata":{"id":"PcrviIYdgzDH","colab_type":"text"},"source":["### 5.1)\n","Load the California housing dataset using `sklearn.datasets.fetch_california_housing`. This returns an object with a `DESCR` attribute describing the dataset, a `data` attribute with the input features, and a `target` attribute with the labels. The goal is to predict the price of houses in a district (a census block) given some stats about that district. This is a regression task (predicting values)."]},{"cell_type":"code","metadata":{"id":"z6cwkj85gzDI","colab_type":"code","colab":{}},"source":["from sklearn.datasets import fetch_california_housing\n","housing = fetch_california_housing()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BEMxvOtTgzDK","colab_type":"code","colab":{}},"source":["print(housing.DESCR)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5QHWHq64gzDM","colab_type":"code","colab":{}},"source":["housing.data.shape"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zxCcMS4kgzDO","colab_type":"code","colab":{}},"source":["housing.target.shape"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3TRr5r10gzDQ","colab_type":"text"},"source":["### 5.2)\n","Split the dataset into a training set, a validation set and a test set using Scikit-Learn's `sklearn.model_selection.train_test_split()` function."]},{"cell_type":"code","metadata":{"id":"RuhWa5ligzDQ","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train_full, X_test, y_train_full, y_test = train_test_split(housing.data, housing.target, random_state=42)\n","X_train, X_valid, y_train, y_valid = train_test_split(X_train_full, y_train_full, random_state=42)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Upt3AEm-gzDS","colab_type":"code","colab":{}},"source":["len(X_train), len(X_valid), len(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jbmqLks9gzDU","colab_type":"text"},"source":["### 5.3)\n","Scale the input features (e.g., using a `sklearn.preprocessing.StandardScaler`). Once again, don't forget that you should not fit the validation set or the test set, only the training set."]},{"cell_type":"code","metadata":{"id":"vrMnH0G-gzDU","colab_type":"code","colab":{}},"source":["from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_valid_scaled = scaler.transform(X_valid)\n","X_test_scaled = scaler.transform(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_B30EIWwgzDX","colab_type":"text"},"source":["### 5.4)\n","Now build, train and evaluate a neural network to tackle this problem. Then use it to make predictions on the test set."]},{"cell_type":"code","metadata":{"id":"9s8bKkrlgzDX","colab_type":"code","colab":{}},"source":["model = keras.models.Sequential([\n","    keras.layers.Dense(30, activation=\"relu\", input_shape=X_train.shape[1:]),\n","    keras.layers.Dense(1)\n","])\n","model.compile(loss=\"mean_squared_error\", optimizer=keras.optimizers.SGD(1e-3))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NadcWMssgzDZ","colab_type":"code","colab":{}},"source":["callbacks = [keras.callbacks.EarlyStopping(patience=10)]\n","history = model.fit(X_train_scaled, y_train,\n","                    validation_data=(X_valid_scaled, y_valid), epochs=100,\n","                    callbacks=callbacks)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"h_i79FP4gzDb","colab_type":"code","colab":{}},"source":["model.evaluate(X_test_scaled, y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OY7WmBkOgzDc","colab_type":"code","colab":{}},"source":["model.predict(X_test_scaled)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"PRA9rfdRgzDe","colab_type":"code","colab":{}},"source":["plot_learning_curves(history)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6vBHi2Z4gzDh","colab_type":"text"},"source":["![Exercise](https://c1.staticflickr.com/9/8101/8553474140_c50cf08708_b.jpg)"]},{"cell_type":"markdown","metadata":{"id":"7Fj0iqPCgzDh","colab_type":"text"},"source":["## Exercise 6 – Hyperparameter search"]},{"cell_type":"markdown","metadata":{"id":"3CQBwm7agzDh","colab_type":"text"},"source":["### 6.1)\n","Try training your model multiple times, with different a learning rate each time (e.g., 1e-4, 3e-4, 1e-3, 3e-3, 3e-2), and compare the learning curves. For this, you need to create a `keras.optimizers.SGD` optimizer and specify the `learning_rate` in its constructor, then pass this `SGD` instance to the `compile()` method using the `optimizer` argument."]},{"cell_type":"code","metadata":{"id":"arp5IIjTgzDi","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TkqBQITagzDk","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"skurtdFSgzDl","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wQ0GLkfPgzDm","colab_type":"text"},"source":["### 6.2)\n","Let's look at a more sophisticated way to tune hyperparameters. Create a `build_model()` function that takes three arguments, `n_hidden`, `n_neurons`, `learning_rate`, and builds, compiles and returns a model with the given number of hidden layers, the given number of neurons and the given learning rate. It is good practice to give a reasonable default value to each argument."]},{"cell_type":"code","metadata":{"id":"l880Ba4TgzDn","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FHRxIV1BgzDo","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"D9UKTxA-gzDs","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0cnaCN1-gzDt","colab_type":"text"},"source":["### 6.3)\n","Create a `keras.wrappers.scikit_learn.KerasRegressor` and pass the `build_model` function to the constructor. This gives you a Scikit-Learn compatible predictor. Try training it and using it to make predictions. Note that you can pass the `n_epochs`, `callbacks` and `validation_data` to the `fit()` method."]},{"cell_type":"code","metadata":{"id":"wpKQjMyogzDu","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SiNtVufIgzDv","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GbKwpnYYgzDy","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1gXX7fBugzDz","colab_type":"text"},"source":["### 6.4)\n","Use a `sklearn.model_selection.RandomizedSearchCV` to search the hyperparameter space of your `KerasRegressor`.\n","\n","**Tips**:\n","* create a `param_distribs` dictionary where each key is the name of a hyperparameter you want to fine-tune (e.g., `\"n_hidden\"`), and each value is the list of values you want to explore (e.g., `[0, 1, 2, 3]`), or a Scipy distribution from `scipy.stats`.\n","* You can use the reciprocal distribution for the learning rate (e.g, `reciprocal(3e-3, 3e-2)`).\n","* Create a `RandomizedSearchCV`, passing the `KerasRegressor` and the `param_distribs` to its constructor, as well as the number of iterations (`n_iter`), and the number of cross-validation folds (`cv`). If you are short on time, you can set `n_iter=10` and `cv=3`. You may also want to set `verbose=2`.\n","* Finally, call the `RandomizedSearchCV`'s `fit()` method on the training set. Once again you can pass it `n_epochs`, `validation_data` and `callbacks` if you want to.\n","* The best parameters found will be available in the `best_params_` attribute, the best score will be in `best_score_`, and the best model will be in `best_estimator_`."]},{"cell_type":"code","metadata":{"id":"cl_THPwvgzD0","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1Pc2SXMfgzD1","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hjGDOi56gzD9","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y-WPxfA8gzD-","colab_type":"text"},"source":["### 6.5)\n","Evaluate the best model found on the test set. You can either use the best estimator's `score()` method, or get its underlying Keras model *via* its `model` attribute, and call this model's `evaluate()` method. Note that the estimator returns the negative mean square error (it's a score, not a loss, so higher is better)."]},{"cell_type":"code","metadata":{"id":"DbLXLjxogzD_","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mM1qD30cgzEA","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"g0z9ShQcgzEB","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KD3_BvJggzEC","colab_type":"text"},"source":["### 6.6)\n","Finally, save the best Keras model found. **Tip**: it is available via the best estimator's `model` attribute, and just need to call its `save()` method."]},{"cell_type":"code","metadata":{"id":"QeLrUj74gzEC","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"X5fBT-tmgzED","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"u7VgzqfygzED","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NmEcQ5klgzEG","colab_type":"text"},"source":["**Tip**: while a randomized search is nice and simple, there are more powerful (but complex) options available out there for hyperparameter search, for example:\n","* [Hyperopt](https://github.com/hyperopt/hyperopt)\n","* [Hyperas](https://github.com/maxpumperla/hyperas)\n","* [Sklearn-Deap](https://github.com/rsteca/sklearn-deap)\n","* [Scikit-Optimize](https://scikit-optimize.github.io/)\n","* [Spearmint](https://github.com/JasperSnoek/spearmint)\n","* [PyMC3](https://docs.pymc.io/)\n","* [GPFlow](https://gpflow.readthedocs.io/)\n","* [Yelp/MOE](https://github.com/Yelp/MOE)\n","* Commercial services such as: [Google Cloud ML Engine](https://cloud.google.com/ml-engine/docs/tensorflow/using-hyperparameter-tuning), [Arimo](https://arimo.com/) or [Oscar](http://oscar.calldesk.ai/)"]},{"cell_type":"markdown","metadata":{"id":"WWQwFvp4gzEG","colab_type":"text"},"source":["![Exercise solution](https://camo.githubusercontent.com/250388fde3fac9135ead9471733ee28e049f7a37/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30362f46696c6f735f736567756e646f5f6c6f676f5f253238666c69707065642532392e6a7067)"]},{"cell_type":"markdown","metadata":{"id":"bBHOjmr7gzEG","colab_type":"text"},"source":["## Exercise 6 – Solution"]},{"cell_type":"markdown","metadata":{"id":"PwcHCVNKgzEI","colab_type":"text"},"source":["### 6.1)\n","Try training your model multiple times, with different a learning rate each time (e.g., 1e-4, 3e-4, 1e-3, 3e-3, 3e-2), and compare the learning curves. For this, you need to create a `keras.optimizers.SGD` optimizer and specify the `learning_rate` in its constructor, then pass this `SGD` instance to the `compile()` method using the `optimizer` argument."]},{"cell_type":"code","metadata":{"id":"GBhX0C4cgzEI","colab_type":"code","colab":{}},"source":["learning_rates = [1e-4, 3e-4, 1e-3, 3e-3, 1e-2, 3e-2]\n","histories = []\n","for learning_rate in learning_rates:\n","    model = keras.models.Sequential([\n","        keras.layers.Dense(30, activation=\"relu\", input_shape=X_train.shape[1:]),\n","        keras.layers.Dense(1)\n","    ])\n","    optimizer = keras.optimizers.SGD(learning_rate)\n","    model.compile(loss=\"mean_squared_error\", optimizer=optimizer)\n","    callbacks = [keras.callbacks.EarlyStopping(patience=10)]\n","    history = model.fit(X_train_scaled, y_train,\n","                        validation_data=(X_valid_scaled, y_valid), epochs=100,\n","                        callbacks=callbacks)\n","    histories.append(history)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wuBMyHdrgzEJ","colab_type":"code","colab":{}},"source":["for learning_rate, history in zip(learning_rates, histories):\n","    print(\"Learning rate:\", learning_rate)\n","    plot_learning_curves(history)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oP9wHREZgzEL","colab_type":"text"},"source":["### 6.2)\n","Let's look at a more sophisticated way to tune hyperparameters. Create a `build_model()` function that takes three arguments, `n_hidden`, `n_neurons`, `learning_rate`, and builds, compiles and returns a model with the given number of hidden layers, the given number of neurons and the given learning rate. It is good practice to give a reasonable default value to each argument."]},{"cell_type":"code","metadata":{"id":"R8WVbIObgzEL","colab_type":"code","colab":{}},"source":["def build_model(n_hidden=1, n_neurons=30, learning_rate=3e-3):\n","    model = keras.models.Sequential()\n","    options = {\"input_shape\": X_train.shape[1:]}\n","    for layer in range(n_hidden + 1):\n","        model.add(keras.layers.Dense(n_neurons, activation=\"relu\", **options))\n","        options = {}\n","    model.add(keras.layers.Dense(1, **options))\n","    optimizer = keras.optimizers.SGD(learning_rate)\n","    model.compile(loss=\"mse\", optimizer=optimizer)\n","    return model"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zt1VkvxzgzEO","colab_type":"text"},"source":["### 6.3)\n","Create a `keras.wrappers.scikit_learn.KerasRegressor` and pass the `build_model` function to the constructor. This gives you a Scikit-Learn compatible predictor. Try training it and using it to make predictions. Note that you can pass the `n_epochs`, `callbacks` and `validation_data` to the `fit()` method."]},{"cell_type":"code","metadata":{"id":"u-3ymDxjgzEO","colab_type":"code","colab":{}},"source":["keras_reg = keras.wrappers.scikit_learn.KerasRegressor(build_model)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1uIRdK31gzEP","colab_type":"code","colab":{}},"source":["keras_reg.fit(X_train_scaled, y_train, epochs=100,\n","              validation_data=(X_valid_scaled, y_valid),\n","              callbacks=[keras.callbacks.EarlyStopping(patience=10)])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"X_1dshgXgzER","colab_type":"code","colab":{}},"source":["keras_reg.predict(X_test_scaled)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j4UOH22_gzES","colab_type":"text"},"source":["### 6.4)\n","Use a `sklearn.model_selection.RandomizedSearchCV` to search the hyperparameter space of your `KerasRegressor`."]},{"cell_type":"code","metadata":{"id":"rvpJJaLtgzES","colab_type":"code","colab":{}},"source":["from scipy.stats import reciprocal\n","\n","param_distribs = {\n","    \"n_hidden\": [0, 1, 2, 3],\n","    \"n_neurons\": np.arange(1, 100),\n","    \"learning_rate\": reciprocal(3e-4, 3e-2),\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"uvKOd1_xgzET","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import RandomizedSearchCV\n","\n","rnd_search_cv = RandomizedSearchCV(keras_reg, param_distribs, n_iter=10, cv=3, verbose=2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LIR3lqc7gzEU","colab_type":"code","colab":{}},"source":["rnd_search_cv.fit(X_train_scaled, y_train, epochs=100,\n","                  validation_data=(X_valid_scaled, y_valid),\n","                  callbacks=[keras.callbacks.EarlyStopping(patience=10)])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4j4cTmBFgzEU","colab_type":"code","colab":{}},"source":["rnd_search_cv.best_params_"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZF5y50TwgzEV","colab_type":"code","colab":{}},"source":["rnd_search_cv.best_score_"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TOIXpMUIgzEW","colab_type":"code","colab":{}},"source":["rnd_search_cv.best_estimator_"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tQN6LdENgzEY","colab_type":"text"},"source":["### 6.5)\n","Evaluate the best model found on the test set. You can either use the best estimator's `score()` method, or get its underlying Keras model *via* its `model` attribute, and call this model's `evaluate()` method. Note that the estimator returns the negative mean square error (it's a score, not a loss, so higher is better)."]},{"cell_type":"code","metadata":{"id":"uSydJzZ_gzEY","colab_type":"code","colab":{}},"source":["rnd_search_cv.score(X_test_scaled, y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KETuDFNpgzEZ","colab_type":"code","colab":{}},"source":["model = rnd_search_cv.best_estimator_.model\n","model.evaluate(X_test_scaled, y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"B7Yw9YPIgzEZ","colab_type":"text"},"source":["### 6.6)\n","Finally, save the best Keras model found. **Tip**: it is available via the best estimator's `model` attribute, and just need to call its `save()` method."]},{"cell_type":"code","metadata":{"id":"6C1sEXAbgzEa","colab_type":"code","colab":{}},"source":["model.save(\"my_fine_tuned_housing_model.h5\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JsVVOKjugzEc","colab_type":"text"},"source":["![Exercise](https://c1.staticflickr.com/9/8101/8553474140_c50cf08708_b.jpg)"]},{"cell_type":"markdown","metadata":{"id":"lYDms7_BgzEc","colab_type":"text"},"source":["## Exercise 7 – The functional API"]},{"cell_type":"markdown","metadata":{"id":"rlT9F2negzEc","colab_type":"text"},"source":["Not all neural network models are simply sequential. Some may have complex topologies. Some may have multiple inputs and/or multiple outputs. For example, a Wide & Deep neural network (see [paper](https://ai.google/research/pubs/pub45413)) connects all or part of the inputs directly to the output layer, as shown on the following diagram:"]},{"cell_type":"markdown","metadata":{"id":"5eo5WBq-gzEd","colab_type":"text"},"source":["<img src=\"https://github.com/ageron/tf2_course/blob/master/images/wide_and_deep_net.png?raw=1\" title=\"Wide and deep net\" width=300 />"]},{"cell_type":"markdown","metadata":{"id":"8bScqs-ogzEd","colab_type":"text"},"source":["### 7.1)\n","Use Keras' functional API to implement a Wide & Deep network to tackle the California housing problem.\n","\n","**Tips**:\n","* You need to create a `keras.layers.Input` layer to represent the inputs. Don't forget to specify the input `shape`.\n","* Create the `Dense` layers, and connect them by using them like functions. For example, `hidden1 = keras.layers.Dense(30, activation=\"relu\")(input)` and `hidden2 = keras.layers.Dense(30, activation=\"relu\")(hidden1)`\n","* Use the `keras.layers.concatenate()` function to concatenate the input layer and the second hidden layer's output.\n","* Create a `keras.models.Model` and specify its `inputs` and `outputs` (e.g., `inputs=[input]`).\n","* Then use this model just like a `Sequential` model: you need to compile it, display its summary, train it, evaluate it and use it to make predictions."]},{"cell_type":"code","metadata":{"id":"iHvMeFXjgzEd","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dy_hyb3HgzEf","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KHBZ_cFlgzEf","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1pvCiXkKgzEg","colab_type":"text"},"source":["### 7.2)\n","After the Sequential API and the Functional API, let's try the Subclassing API:\n","* Create a subclass of the `keras.models.Model` class.\n","* Create all the layers you need in the constructor (e.g., `self.hidden1 = keras.layers.Dense(...)`).\n","* Use the layers to process the `input` in the `call()` method, and return the output.\n","* Note that you do not need to create a `keras.layers.Input` in this case.\n","* Also note that `self.output` is used by Keras, so you should use another name for the output layer (e.g., `self.output_layer`).\n","\n","**When should you use the Subclassing API?**\n","* Both the Sequential API and the Functional API are declarative: you first declare the list of layers you need and how they are connected, and only then can you feed your model with actual data. The models that these APIs build are just static graphs of layers. This has many advantages (easy inspection, debugging, saving, loading, sharing, etc.), and they cover the vast majority of use cases, but if you need to build a very dynamic model (e.g., with loops or conditional branching), or if you want to experiment with new ideas using an imperative programming style, then the Subclassing API is for you. You can pretty much do any computation you want in the `call()` method, possibly with loops and conditions, using Keras layers of even low-level TensorFlow operations.\n","* However, this extra flexibility comes at the cost of less transparency. Since the model is defined within the `call()` method, Keras cannot fully inspect it. All it sees is the list of model attributes (which include the layers you define in the constructor), so when you display the model summary you just see a list of unconnected layers. Consequently, you cannot save or load the model without writing extra code. So this API is best used only when you really need the extra flexibility."]},{"cell_type":"code","metadata":{"id":"0_HSoMWUgzEh","colab_type":"code","colab":{}},"source":["class MyModel(keras.models.Model):\n","    def __init__(self):\n","        super(MyModel, self).__init__()\n","        # create layers here\n","\n","    def call(self, input):\n","        # write any code here, using layers or even low-level TF code\n","        return output\n","\n","model = MyModel()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dIMvtyQfgzEh","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"atv9Vso0gzEi","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BDIIQOH8gzEj","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"prvVDhyzgzEk","colab_type":"text"},"source":["### 7.3)\n","Now suppose you want to send only features 0 to 4 directly to the output, and only features 2 to 7 through the hidden layers, as shown on the following diagram. Use the functional API to build, train and evaluate this model.\n","\n","**Tips**:\n","* You need to create two `keras.layers.Input` (`input_A` and `input_B`)\n","* Build the model using the functional API, as above, but when you build the `keras.models.Model`, remember to set `inputs=[input_A, input_B]`\n","* When calling `fit()`, `evaluate()` and  `predict()`, instead of passing `X_train_scaled`, pass `(X_train_scaled_A, X_train_scaled_B)` (two NumPy arrays containing only the appropriate features copied from `X_train_scaled`)."]},{"cell_type":"markdown","metadata":{"id":"O4zrcr9TgzEk","colab_type":"text"},"source":["<img src=\"https://github.com/ageron/tf2_course/blob/master/images/multiple_inputs.png?raw=1\" title=\"Multiple inputs\" width=300 />"]},{"cell_type":"code","metadata":{"id":"pRL_Fhl_gzEk","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fUN0c-1qgzEn","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LrhnnKMUgzEo","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jIJP0iAlgzEp","colab_type":"text"},"source":["### 7.4)\n","Build the multi-input and multi-output neural net represented in the following diagram.\n","\n","<img src=\"https://github.com/ageron/tf2_course/blob/master/images/multiple_inputs_and_outputs.png?raw=1\" title=\"Multiple inputs and outputs\" width=400 />\n","\n","**Why?**\n","\n","There are many use cases in which having multiple outputs can be useful:\n","* Your task may require multiple outputs, for example, you may want to locate and classify the main object in a picture. This is both a regression task (finding the coordinates of the object's center, as well as its width and height) and a classification task.\n","* Similarly, you may have multiple independent tasks to perform based on the same data. Sure, you could train one neural network per task, but in many cases you will get better results on all tasks by training a single neural network with one output per task. This is because the neural network can learn features in the data that are useful across tasks.\n","* Another use case is as a regularization technique (i.e., a training constraint whose objective is to reduce overfitting and thus improve the model's ability to generalize). For example, you may want to add some auxiliary outputs in a neural network architecture (as shown in the diagram) to ensure that that the underlying part of the network learns something useful on its own, without relying on the rest of the network.\n","\n","**Tips**:\n","* Building the model is pretty straightforward using the functional API. Just make sure you specify both outputs when creating the `keras.models.Model`, for example `outputs=[output, aux_output]`.\n","* Each output has its own loss function. In this scenario, they will be identical, so you can either specify `loss=\"mse\"` (this loss will apply to both outputs) or `loss=[\"mse\", \"mse\"]`, which does the same thing.\n","* The final loss used to train the whole network is just a weighted sum of all loss functions. In this scenario, you want most to give a much smaller weight to the auxiliary output, so when compiling the model, you must specify `loss_weights=[0.9, 0.1]`.\n","* When calling `fit()` or `evaluate()`, you need to pass the labels for all outputs. In this scenario the labels will be the same for the main output and for the auxiliary output, so make sure to pass `(y_train, y_train)` instead of `y_train`.\n","* The `predict()` method will return both the main output and the auxiliary output."]},{"cell_type":"code","metadata":{"id":"-RrTX9LggzEp","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JpQlX0jigzEq","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OV_lfu1OgzEq","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YV2mlMEPgzEr","colab_type":"text"},"source":["![Exercise solution](https://camo.githubusercontent.com/250388fde3fac9135ead9471733ee28e049f7a37/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30362f46696c6f735f736567756e646f5f6c6f676f5f253238666c69707065642532392e6a7067)"]},{"cell_type":"markdown","metadata":{"id":"_RU7c0KKgzEr","colab_type":"text"},"source":["## Exercise 7 – Solution"]},{"cell_type":"markdown","metadata":{"id":"9sACe9zygzEr","colab_type":"text"},"source":["### 7.1)\n","Use Keras' functional API to implement a Wide & Deep network to tackle the California housing problem."]},{"cell_type":"code","metadata":{"id":"6wF-_zKzgzEu","colab_type":"code","colab":{}},"source":["input = keras.layers.Input(shape=X_train.shape[1:])\n","hidden1 = keras.layers.Dense(30, activation=\"relu\")(input)\n","hidden2 = keras.layers.Dense(30, activation=\"relu\")(hidden1)\n","concat = keras.layers.concatenate([input, hidden2])\n","output = keras.layers.Dense(1)(concat)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rvdzr6f4gzEw","colab_type":"code","colab":{}},"source":["model = keras.models.Model(inputs=[input], outputs=[output])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aky9KjBmgzEx","colab_type":"code","colab":{}},"source":["model.compile(loss=\"mean_squared_error\", optimizer=keras.optimizers.SGD(1e-3))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"29lpXX1DgzEz","colab_type":"code","colab":{}},"source":["model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XF_Kkqp-gzE0","colab_type":"code","colab":{}},"source":["history = model.fit(X_train_scaled, y_train, epochs=10,\n","                    validation_data=(X_valid_scaled, y_valid))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CuV43suqgzE3","colab_type":"code","colab":{}},"source":["model.evaluate(X_test_scaled, y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1XFSw7qTgzE4","colab_type":"code","colab":{}},"source":["model.predict(X_test_scaled)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7CBCG-WogzE4","colab_type":"text"},"source":["### 7.2)\n","After the Sequential API and the Functional API, let's try the Subclassing API:\n","* Create a subclass of the `keras.models.Model` class.\n","* Create all the layers you need in the constructor (e.g., `self.hidden1 = keras.layers.Dense(...)`).\n","* Use the layers to process the `input` in the `call()` method, and return the output.\n","* Note that you do not need to create a `keras.layers.Input` in this case.\n","* Also note that `self.output` is used by Keras, so you should use another name for the output layer (e.g., `self.output_layer`)."]},{"cell_type":"code","metadata":{"id":"19BHoC0NgzE5","colab_type":"code","colab":{}},"source":["class MyModel(keras.models.Model):\n","    def __init__(self):\n","        super(MyModel, self).__init__()\n","        self.hidden1 = keras.layers.Dense(30, activation=\"relu\")\n","        self.hidden2 = keras.layers.Dense(30, activation=\"relu\")\n","        self.output_ = keras.layers.Dense(1)\n","\n","    def call(self, input):\n","        hidden1 = self.hidden1(input)\n","        hidden2 = self.hidden2(hidden1)\n","        concat = keras.layers.concatenate([input, hidden2])\n","        output = self.output_(concat)\n","        return output\n","\n","model = MyModel()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fGH2okaigzE5","colab_type":"code","colab":{}},"source":["model.compile(loss=\"mse\", optimizer=keras.optimizers.SGD(1e-3))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5nBZAyangzE6","colab_type":"code","colab":{}},"source":["history = model.fit(X_train_scaled, y_train, epochs=10,\n","                    validation_data=(X_valid_scaled, y_valid))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WkKYMzsEgzE7","colab_type":"code","colab":{}},"source":["model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QDanpshigzE8","colab_type":"code","colab":{}},"source":["model.evaluate(X_test_scaled, y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MmS-z-XMgzE9","colab_type":"code","colab":{}},"source":["model.predict(X_test_scaled)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5rgs3iHEgzE-","colab_type":"text"},"source":["### 7.3)\n","Now suppose you want to send only features 0 to 4 directly to the output, and only features 2 to 7 through the hidden layers, as shown on the diagram. Use the functional API to build, train and evaluate this model."]},{"cell_type":"code","metadata":{"id":"JhZAHi4HgzE-","colab_type":"code","colab":{}},"source":["input_A = keras.layers.Input(shape=[5])\n","input_B = keras.layers.Input(shape=[6])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sp2fwBoKgzE_","colab_type":"code","colab":{}},"source":["hidden1 = keras.layers.Dense(30, activation=\"relu\")(input_B)\n","hidden2 = keras.layers.Dense(30, activation=\"relu\")(hidden1)\n","concat = keras.layers.concatenate([input_A, hidden2])\n","output = keras.layers.Dense(1)(concat)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NVyl0D9EgzFA","colab_type":"code","colab":{}},"source":["model = keras.models.Model(inputs=[input_A, input_B], outputs=[output])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3VsiGAJdgzFB","colab_type":"code","colab":{}},"source":["model.compile(loss=\"mean_squared_error\", optimizer=keras.optimizers.SGD(1e-3))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8dZFrD5jgzFD","colab_type":"code","colab":{}},"source":["model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zQgCgqW1gzFE","colab_type":"code","colab":{}},"source":["X_train_scaled_A = X_train_scaled[:, :5]\n","X_train_scaled_B = X_train_scaled[:, 2:]\n","X_valid_scaled_A = X_valid_scaled[:, :5]\n","X_valid_scaled_B = X_valid_scaled[:, 2:]\n","X_test_scaled_A = X_test_scaled[:, :5]\n","X_test_scaled_B = X_test_scaled[:, 2:]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-4079cEbgzFE","colab_type":"code","colab":{}},"source":["history = model.fit([X_train_scaled_A, X_train_scaled_B], y_train, epochs=10,\n","                    validation_data=([X_valid_scaled_A, X_valid_scaled_B], y_valid))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bl_TacAdgzFF","colab_type":"code","colab":{}},"source":["model.evaluate([X_test_scaled_A, X_test_scaled_B], y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hQWP19pEgzFG","colab_type":"code","colab":{}},"source":["model.predict([X_test_scaled_A, X_test_scaled_B])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oFD14j15gzFG","colab_type":"text"},"source":["### 7.4)\n","Build the multi-input and multi-output neural net represented in the diagram."]},{"cell_type":"code","metadata":{"id":"bDw-lOHcgzFH","colab_type":"code","colab":{}},"source":["input_A = keras.layers.Input(shape=X_train_scaled_A.shape[1:])\n","input_B = keras.layers.Input(shape=X_train_scaled_B.shape[1:])\n","hidden1 = keras.layers.Dense(30, activation=\"relu\")(input_B)\n","hidden2 = keras.layers.Dense(30, activation=\"relu\")(hidden1)\n","concat = keras.layers.concatenate([input_A, hidden2])\n","output = keras.layers.Dense(1)(concat)\n","aux_output = keras.layers.Dense(1)(hidden2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Uvu6Oa_OgzFH","colab_type":"code","colab":{}},"source":["model = keras.models.Model(inputs=[input_A, input_B],\n","                           outputs=[output, aux_output])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CG0J8GmegzFI","colab_type":"code","colab":{}},"source":["model.compile(loss=\"mean_squared_error\", loss_weights=[0.9, 0.1],\n","              optimizer=keras.optimizers.SGD(1e-3))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"P39iS_1zgzFJ","colab_type":"code","colab":{}},"source":["model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dx8vvz2_gzFJ","colab_type":"code","colab":{}},"source":["history = model.fit([X_train_scaled_A, X_train_scaled_B], [y_train, y_train], epochs=10,\n","                    validation_data=([X_valid_scaled_A, X_valid_scaled_B], [y_valid, y_valid]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7UXD2VDfgzFK","colab_type":"code","colab":{}},"source":["model.evaluate([X_test_scaled_A, X_test_scaled_B], [y_test, y_test])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Beb_P5igzFL","colab_type":"code","colab":{}},"source":["y_pred, y_pred_aux = model.predict([X_test_scaled_A, X_test_scaled_B])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cPFX4DxcgzFM","colab_type":"code","colab":{}},"source":["y_pred"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"8GkKjM6vgzFN","colab_type":"code","colab":{}},"source":["y_pred_aux"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hu-T59sAgzFO","colab_type":"text"},"source":["![Exercise](https://c1.staticflickr.com/9/8101/8553474140_c50cf08708_b.jpg)"]},{"cell_type":"markdown","metadata":{"id":"e6P_hoyRgzFO","colab_type":"text"},"source":["## Exercise 8 – Deep Nets"]},{"cell_type":"markdown","metadata":{"id":"0-WgwH3ngzFO","colab_type":"text"},"source":["Let's go back to Fashion MNIST and build deep nets to tackle it. We need to load it, split it and scale it."]},{"cell_type":"code","metadata":{"id":"Xe15TwH2gzFP","colab_type":"code","colab":{}},"source":["fashion_mnist = keras.datasets.fashion_mnist\n","(X_train_full, y_train_full), (X_test, y_test) = fashion_mnist.load_data()\n","X_valid, X_train = X_train_full[:5000], X_train_full[5000:]\n","y_valid, y_train = y_train_full[:5000], y_train_full[5000:]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vhhP8yi6gzFQ","colab_type":"code","colab":{}},"source":["from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train.astype(np.float32).reshape(-1, 28 * 28)).reshape(-1, 28, 28)\n","X_valid_scaled = scaler.transform(X_valid.astype(np.float32).reshape(-1, 28 * 28)).reshape(-1, 28, 28)\n","X_test_scaled = scaler.transform(X_test.astype(np.float32).reshape(-1, 28 * 28)).reshape(-1, 28, 28)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_Og8qm6pgzFQ","colab_type":"text"},"source":["### 8.1)\n","Build a sequential model with 20 hidden dense layers, with 100 neurons each, using the ReLU activation function, plus the output layer (10 neurons, softmax activation function). Try to train it for 10 epochs on Fashion MNIST and plot the learning curves. Notice that progress is very slow."]},{"cell_type":"code","metadata":{"id":"bt46G_V2gzFR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JL4Ki5zDgzFS","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ypWZUSV0gzFS","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z83F3VG3gzFT","colab_type":"text"},"source":["### 8.2)\n","Update the model to add a `BatchNormalization` layer after every hidden layer. Notice that performance progresses much faster per epoch, although computations are much more intensive. Display the model summary and notice all the non-trainable parameters (the scale $\\gamma$ and offset $\\beta$ parameters)."]},{"cell_type":"code","metadata":{"id":"5CfEyA5TgzFT","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"31eEEBOqgzFU","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QaC2R8LHgzFV","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kifbLLvrgzFV","colab_type":"text"},"source":["### 8.3)\n","Try moving the BN layers before the hidden layers' activation functions. Does this affect the model's performance?"]},{"cell_type":"code","metadata":{"id":"XnTCclvwgzFV","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EjIWf6G3gzFY","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eulKzh-LgzFY","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XABJPdcIgzFZ","colab_type":"text"},"source":["### 8.4)\n","Remove all the BN layers, and just use the SELU activation function instead (always use SELU with LeCun Normal weight initialization). Notice that you get better performance than with BN but training is much faster. Isn't it marvelous? :-)"]},{"cell_type":"code","metadata":{"id":"hEi_E7TxgzFZ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aHm8i4GLgzFa","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WDDIET_pgzFa","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nwypF4rQgzFb","colab_type":"text"},"source":["### 8.5)\n","Try training for 10 additional epochs, and notice that the model starts overfitting. Try adding a Dropout layer (with a 50% dropout rate) just before the output layer. Does it reduce overfitting? What about the final validation accuracy?\n","\n","**Warning**: you should not use regular Dropout, as it breaks the self-normalizing property of the SELU activation function. Instead, use AlphaDropout, which is designed to work with SELU."]},{"cell_type":"code","metadata":{"id":"Qnom7Uv6gzFb","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ttMWa4KhgzFc","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GbZMYZM8gzFe","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"so2j-JExgzFf","colab_type":"text"},"source":["![Exercise solution](https://camo.githubusercontent.com/250388fde3fac9135ead9471733ee28e049f7a37/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30362f46696c6f735f736567756e646f5f6c6f676f5f253238666c69707065642532392e6a7067)"]},{"cell_type":"markdown","metadata":{"id":"nIyYC0MLgzFf","colab_type":"text"},"source":["## Exercise 8 – Solution"]},{"cell_type":"markdown","metadata":{"id":"muC82wN_gzFf","colab_type":"text"},"source":["### 8.1)\n","Build a sequential model with 20 hidden dense layers, with 100 neurons each, using the ReLU activation function, plus the output layer (10 neurons, softmax activation function). Try to train it for 10 epochs on Fashion MNIST and plot the learning curves. Notice that progress is very slow."]},{"cell_type":"code","metadata":{"id":"XCtVs-uugzFf","colab_type":"code","colab":{}},"source":["model = keras.models.Sequential()\n","model.add(keras.layers.Flatten(input_shape=[28, 28]))\n","for _ in range(20):\n","    model.add(keras.layers.Dense(100, activation=\"relu\"))\n","model.add(keras.layers.Dense(10, activation=\"softmax\"))\n","model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=keras.optimizers.SGD(1e-3),\n","              metrics=[\"accuracy\"])\n","history = model.fit(X_train_scaled, y_train, epochs=10,\n","                    validation_data=(X_valid_scaled, y_valid))\n","plot_learning_curves(history)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vNgA8ODagzFg","colab_type":"text"},"source":["### 8.2)\n","Update the model to add a `BatchNormalization` layer after every hidden layer. Notice that performance progresses much faster per epoch, although computations are much more intensive. Display the model summary and notice all the non-trainable parameters (the scale $\\gamma$ and offset $\\beta$ parameters)."]},{"cell_type":"code","metadata":{"id":"wN08aidcgzFh","colab_type":"code","colab":{}},"source":["model = keras.models.Sequential()\n","model.add(keras.layers.Flatten(input_shape=[28, 28]))\n","for _ in range(20):\n","    model.add(keras.layers.Dense(100, activation=\"relu\"))\n","    model.add(keras.layers.BatchNormalization())\n","model.add(keras.layers.Dense(10, activation=\"softmax\"))\n","model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=keras.optimizers.SGD(1e-3),\n","              metrics=[\"accuracy\"])\n","history = model.fit(X_train_scaled, y_train, epochs=10,\n","                    validation_data=(X_valid_scaled, y_valid))\n","plot_learning_curves(history)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"C22onxC7gzFh","colab_type":"code","colab":{}},"source":["model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-PRF7MSkgzFi","colab_type":"text"},"source":["### 8.3)\n","Try moving the BN layers before the hidden layers' activation functions. Does this affect the model's performance?"]},{"cell_type":"code","metadata":{"id":"54mvXdhxgzFi","colab_type":"code","colab":{}},"source":["model = keras.models.Sequential()\n","model.add(keras.layers.Flatten(input_shape=[28, 28]))\n","for _ in range(20):\n","    model.add(keras.layers.Dense(100))\n","    model.add(keras.layers.BatchNormalization())\n","    model.add(keras.layers.Activation(\"relu\"))\n","model.add(keras.layers.Dense(10, activation=\"softmax\"))\n","model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=keras.optimizers.SGD(1e-3),\n","              metrics=[\"accuracy\"])\n","history = model.fit(X_train_scaled, y_train, epochs=10,\n","                    validation_data=(X_valid_scaled, y_valid))\n","plot_learning_curves(history)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kBfb9DwlgzFk","colab_type":"text"},"source":["### 8.4)\n","Remove all the BN layers, and just use the SELU activation function instead (always use SELU with LeCun Normal weight initialization). Notice that you get better performance than with BN but training is much faster. Isn't it marvelous? :-)"]},{"cell_type":"code","metadata":{"id":"9k0K30zJgzFk","colab_type":"code","colab":{}},"source":["model = keras.models.Sequential()\n","model.add(keras.layers.Flatten(input_shape=[28, 28]))\n","for _ in range(20):\n","    model.add(keras.layers.Dense(100, activation=\"selu\",\n","                                 kernel_initializer=\"lecun_normal\"))\n","model.add(keras.layers.Dense(10, activation=\"softmax\"))\n","model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=keras.optimizers.SGD(1e-3),\n","              metrics=[\"accuracy\"])\n","history = model.fit(X_train_scaled, y_train, epochs=10,\n","                    validation_data=(X_valid_scaled, y_valid))\n","plot_learning_curves(history)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Lw4-FS1igzFl","colab_type":"text"},"source":["### 8.5)\n","Try training for 10 additional epochs, and notice that the model starts overfitting. Try adding a Dropout layer (with a 50% dropout rate) just before the output layer. Does it reduce overfitting? What about the final validation accuracy?"]},{"cell_type":"code","metadata":{"id":"A3hiWD5lgzFl","colab_type":"code","colab":{}},"source":["history = model.fit(X_train_scaled, y_train, epochs=10,\n","                    validation_data=(X_valid_scaled, y_valid))\n","plot_learning_curves(history)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pDzq2f57gzFm","colab_type":"code","colab":{}},"source":["model = keras.models.Sequential()\n","model.add(keras.layers.Flatten(input_shape=[28, 28]))\n","for _ in range(20):\n","    model.add(keras.layers.Dense(100, activation=\"selu\",\n","                                 kernel_initializer=\"lecun_normal\"))\n","model.add(keras.layers.AlphaDropout(rate=0.5))\n","model.add(keras.layers.Dense(10, activation=\"softmax\"))\n","model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=keras.optimizers.SGD(1e-3),\n","              metrics=[\"accuracy\"])\n","history = model.fit(X_train_scaled, y_train, epochs=20,\n","                    validation_data=(X_valid_scaled, y_valid))\n","plot_learning_curves(history)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dTR3vg3ZgzFn","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}